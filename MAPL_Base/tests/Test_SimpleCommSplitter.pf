module Test_SimpleCommSplitter
   use pfunit
   use MAPL_SimpleCommSplitterMod
   implicit none

@testParameter
   type, extends(MpiTestParameter) :: SplitParameter
      ! inputs
      integer, allocatable :: group_sizes(:)
      character(:), allocatable :: group_names
      integer :: rank
      integer :: npes
      ! outputs
      integer :: expected_color
   contains
      procedure :: toString
   end type SplitParameter
   
@testCase(constructor=Test_SimpleCommSplitter, testParameters={getParameters()})
   type, extends(MpiTestCase) :: Test_SimpleCommSplitter
      type (SimpleCommSplitter) :: splitter
   contains
      procedure :: setUp
      procedure :: tearDown
   end type Test_SimpleCommSplitter


   interface SplitParameter
      module procedure new_SplitParameter
   end interface SplitParameter

   interface Test_SimpleCommSplitter
      module procedure new_Test_SimpleCommSplitter
   end interface Test_SimpleCommSplitter

   integer, parameter :: EMPTY(0) = shape(1)

contains


   function new_SplitParameter(group_sizes, rank, npes, expected_color) result(p)
      type (SplitParameter) :: p
      integer, intent(in) :: group_sizes(:)
      integer, intent(in) :: rank
      integer, intent(in) :: npes
      integer, intent(in) :: expected_color

      p%group_sizes = group_sizes
      p%rank = rank
      p%npes = npes
      p%expected_color = expected_color
   end function new_SplitParameter


   function new_Test_SimpleCommSplitter(testParameter) result(aTest)
      type (Test_SimpleCommSplitter) :: aTest
      class (SplitParameter), intent(in) :: testParameter

   end function new_Test_SimpleCommSplitter


   subroutine setUp(this)
      class (Test_SimpleCommSplitter), intent(inout) :: this

      integer :: i
      select type (p => this%testParameter)
      type is (SplitParameter)
         this%splitter = SimpleCommSplitter(this%getMpiCommunicator())
         do i = 1, size(p%group_sizes)
            call this%splitter%add_group(p%group_sizes(i), name=p%group_names(i))
         end do
      end select

   end subroutine setUp


   subroutine tearDown(this)
      class (Test_SimpleCommSplitter), intent(inout) :: this

      ! nothing to do 
   end subroutine tearDown


   function getParameters() result(params)
      type (SplitParameter), allocatable :: params(:)

      !                     sizes  names rank npes expected
      params = [ &
           ! 1 group
           & SplitParameter(EMPTY, 'all', 0, 1, 1) &
!!$           & , SplitParameter(EMPTY, 'all', 0, 2, 1) &
!!$           & , SplitParameter(EMPTY, 'all', 2, 2, 1) &
!!$           ! 2 groups
!!$           & , SplitParameter([1], 'a,b', 0, 1, 1) &
!!$           & , SplitParameter([1], 'a,b', 0, 2, 1) &
           & , SplitParameter([1], 'a,b', 1, 2, 2) & ! unused process
!!$           & , SplitParameter([2], 'a,b', 1, 4, 1) & ! unused process
!!$           & , SplitParameter([2], 'a,b', 3, 4, 2) & ! unused process
!!$           & , SplitParameter([6], 'a,b', 0, 6, 1) &
!!$           & , SplitParameter([6], 'a,b', 5, 6, 1) &
!!$           ! 3 groups
!!$           & , SplitParameter([1,1], 'a,b', 0, 2, 1) &
!!$           & , SplitParameter([1,1], 'a,bb,ccc', 1, 2, 2) &
!!$           & , SplitParameter([1,1], 'a,bb,ccc', 2, 3, 3) &
!!$           & , SplitParameter([2,1], 'a,bb,ccc', 2, 5, 2) &
!!$           & , SplitParameter([2,1], 'a,bb,ccc', 3, 5, 3) &
!!$           & , SplitParameter([1,2], 'a,bb,ccc', 0, 5, 1) &
!!$           & , SplitParameter([1,2], 'a,bb,ccc', 1, 5, 2) &
!!$           & , SplitParameter([1,2], 'a,bb,ccc', 2, 5, 2) &
!!$           & , SplitParameter([1,2], 'a,bb,ccc', 3, 5, 3) &
!!$           & , SplitParameter([1,2], 'a,bb,ccc', 4, 5, 3) &
      ]

   end function getParameters


   @test
   subroutine test_split(this)
      class (Test_SimpleCommSplitter), intent(inout) :: this

      integer :: status
      type (SplitCommunicator) :: split_comm
      integer :: color

      select type (p => this%testParameter)
      type is (SplitParameter)
         split_comm = this%splitter%split()

         @assertEqual
         call MPI_Comm_size(split_comm%comm, npes_found, ierror)
         
         @assertEqual(0, status)
         @assertEqual(p%expected_color, color)
      end select

   end subroutine test_get_color_simple


   function toString(this) result(string)
      character(len=:), allocatable :: string
      class (SplitParameter), intent(in) :: this

      character(len=200) :: buf

      write(buf,'("sz=[",10(g0:,1x),a,a,"; rank=",i0,"; npes=",i0,"; col=",i0,";")') &
           & this%group_sizes, "]; nm=",this%group_names, this%rank, this%npes, this%expected_color

      string = trim(buf)

   end function toString

end module Test_SimpleCommSplitter
