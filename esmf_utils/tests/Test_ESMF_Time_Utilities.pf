#include "MAPL_TestErr.h"
module Test_ESMF_Time_Utilities
   use mapl3g_ESMF_Time_Utilities
   use esmf
   use funit
   implicit none

contains

   @Test
   subroutine test_get_zero()
      type(ESMF_TimeInterval) :: interval
      integer(ESMF_KIND_I4) :: ns
      integer(ESMF_KIND_I4), parameter :: EXPECTED_NS = 0
      integer(ESMF_KIND_I4), parameter :: INITIAL_NS = 1

      call ESMF_TimeIntervalSet(interval, ns=INITIAL_NS, _RC)
      actual = zero_time_interval()
      call ESMF_TimeIntervalGet(actual, ns=ns, _RC)
      @assertEqual(EXPECTED_NS, ns, 'Interval is not zero.')

   end subroutine test_get_zero

   @Test
   subroutine test_intervals_are_compatible()
      type(ESMF_TimeInterval) :: larger
      type(ESMF_TimeInterval) :: smaller
      integer(kind=ESMF_KIND_I4), parameter :: YY = 3
      integer(kind=ESMF_KIND_I4), parameter :: MM = 3
      integer(kind=ESMF_KIND_I4), parameter :: DD = 3
      integer(kind=ESMF_KIND_I4), parameter :: H = 3
      logical :: compatible

      call ESMF_TimeIntervalSet(larger, dd=3*DD, _RC)
      call ESMF_TimeIntervalSet(smaller, dd=DD, _RC)
      compatible = intervals_are_compatible(larger, smaller, _RC)
      @assertTrue(compatible, 'The intervals are compatible.')

      call ESMF_TimeIntervalSet(smaller, dd=2*DD, _RC)
      compatible = intervals_are_compatible(larger, smaller, _RC)
      @assertFalse(compatible, 'The smaller interval does not divide the larger interval evenly.')

   end subroutine test_intervals_are_compatible

   !@Test
   subroutine test_times_and_intervals_are_compatible()
      integer(ESMF_KIND_I4), parameter :: YY = 3
      integer(ESMF_KIND_I4), parameter :: MM = 3
      integer(ESMF_KIND_I4), parameter :: DD = 3
      integer(ESMF_KIND_I4), parameter :: H = 3
      type(ESMF_TimeInterval) :: larger
      type(ESMF_TimeInterval) :: smaller
      type(ESMF_Time) :: time1
      type(ESMF_Time) :: time2
      logical :: compatible

   end subroutine test_times_and_intervals_are_compatible

end module Test_ESMF_Time_Utilities
