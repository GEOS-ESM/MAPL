module Test_HConfigUtils
   use funit
   use ESMF

   implicit none

   type(ESMF_HConfig) :: hconfig
   logical :: hconfig_is_initialized = .FALSE.
   integer :: SUCCESS = 0 
   integer, parameter :: KEY_LENGTH = 80
   character(len=*), parameter :: DEFAULT_MSG = 'ESMF Call Failed: '

   integer(kind=ESMF_KIND_I4), parameter :: expected_i4 = 2**2
   integer(kind=ESMF_KIND_I4), parameter :: default_i4 = 2**20
   character(len=KEY_LENGTH), parameter :: I4_key = 'k_I4'
   integer(kind=ESMF_KIND_I4), parameter :: expected_i4seq(:) = [2**4, 2**6, 2**8, 2**16]
   integer(kind=ESMF_KIND_I4), parameter :: default_i4_seq(:) = [2**22, 2**24, 2**26, 2**28]
   character(len=KEY_LENGTH), parameter :: I4seq_key = 'k_I4seq'

contains

   @before
   subroutine setup()
      integer :: status
      if(hconfig_is_initialized) return
      call initialize_hconfig(hconfig, rc = status)
      if(status /= SUCCESS) print *, 'Failed to initialize ESMF_HConfig'

   end subroutine setup
   
   logical function check_rc(status, rc)
      integer, intent(in) :: status
      integer, optional, intent(in) :: rc

      if(present(rc)) rc = status
      check_rc = (status /= SUCCESS)

   end function check_rc

   logical function failed(status, msg)
      integer, intent(in) :: status
      character(len=*), optional, intent(in) :: msg
      character(len=80) :: msg_ = 'Failed ESMF call'
      
      failed = check_rc(status)
      if(failed) then
         if(present(msg)) msg_ = trim(msg_) // ': ' trim(msg)
         @assertTrue(failed, trim(msg))
      end if

   end function failed

   logical function not_found(found, status, id)
      logical, intent(in) :: found
      integer, intent(in) :: status
      character(len=*), optional, intent(in) :: id
      character(len=80) :: msg_ = ' not found'
      logical :: failure

      if(present(id)) then
         msg_ = id // trim(msg_) 
      else
         msg_ = 'key ' // trim(msg_)
      end if

      failure = failed(status, 'key not found')
      if(failure) return
      
      not_found = .not. found
      @assertFalse(not_found, trim(msg_))

   end function not_found

   logical function is_success(status, msg)
      integer, intent(in) :: status

      is_success = (status == SUCCESS)

   end function is_success

   subroutine initialize_hconfig(hconf, rc)
      type(ESMF_HConfig), intent(inout) :: hconf
      integer, optional, intent(out) :: rc
      integer :: status

      if(hconfig_is_initialized) return

      hconf = HConfigCreate(rc = status)
      if(check_rc(status, rc)) return
         
      call HConfigAdd(hconf, expected_i4, addKeyString = I4_key, rc = status)
      if(check_rc(status, rc) return

      hconfig_is_initialized = .TRUE.

   end subroutine initialize_hconfig

   @test
   subroutine get_i4()
      character(len=*), parameter :: good_key = trim(I4_key)
      integer(kind=ESMF_KIND_I4), parameter :: expected = expected_i4
      integer(kind=ESMF_KIND_I4), parameter :: default_ = default_i4
      character(len=*), parameter :: bad_key = 'bad_' // good_key
      type(ESMF_HConfig) :: hconfig
      integer(kind=ESMF_KIND_I4) :: actual
      integer :: status_
      logical :: found
      character(len=KEY_LENGTH) :: key

      expected = expected_i4
      default_ = default_i4

      ! First with a valid key
      key = good_key
      found = ESMF_HConfigIsDefined(hconfig, keystring = key, rc = status)
      @assertEqual(is_success(status), DEFAULT_MESSAGE // trim(key) // '[HConfig]')
      @assertTrue(found, trim(key) // ' is not found')
!      if(not_found(found, status, trim(key) // ' [HConfig]')) return
      actual = ESMF_HConfigAsI4(hconfig, keystring = key, rc = status_)
      @assertEqual(is_success(status), DEFAULT_MESSAGE // trim(key) // '[HConfig]')
!      if(failed(status, '[HConfig]')) return
      @assertEqual(expected, actual, 'R4: actual does not match expected. [HConfig]')
      
      key = bad_key
      found = ESMF_HConfigIsDefined(hconfig, keystring = key, rc = status)
!      if(failed(status, '[default]')) return
      @assertFalse(found, trim(key) // ' should not be defined.')
!      if(found) return
      actual = ESMF_HConfigAsI4(hconfig, keystring = key, rc = status_)
      @assertEqual(SUCCESS, status, 'ESMF Call Failed: ' // trim(key) // '[HConfig]')
!      if(failed(status, '[default]')) return
      @assertEqual(default_, actual, 'R4: actual does not match expected. [default]')

   end subroutine get_i4

   @test
   subroutine get_i8()
   end subroutine get_i8

   @test
   subroutine get_logical_seq()
   end subroutine get_logical_seq

   @test
   subroutine get_i8seq()
   end subroutine get_i8seq

   @test
   subroutine get_r8seq()
   end subroutine get_r8seq

   @test
   subroutine get_string_seq()
   end subroutine get_string_seq

   @after
   subroutine clean_up()
      integer :: status
      call ESMF_HConfigDestroy(hconfig, rc = status)
   end subroutine clean_up

end module Test_HConfigUtils
