module Test_HConfigUtils
   use funit
   use ESMF
   use mapl3g_HConfigUtils

   implicit none

   integer, parameter :: SUCCESS = ESMF_SUCCESS
   integer, parameter :: FAILURE = SUCCESS 
   integer, parameter :: KEY_LENGTH = 80
   integer, parameter :: VALUE_LENGTH = 80
   integer, parameter :: YAML_LENGTH = 800
   integer, parameter :: SEQ_SIZE = 4

   ! Global variables since multiple tests use them. Save declarations.

   ! map key
   character(len=KEY_LENGTH) :: key

   ! map value for key
   character(len=VALUE_LENGTH) :: value_
   
   ! YAML string to create ESMF_HConfig from
   character(len=:), allocatable :: yaml_string

   ! This ESMF_HConfig variable is reused.
   type(ESMF_HConfig) :: hconfig

   integer :: status

contains

   subroutine make_yaml_string(key, value_)
      character(len=KEY_LENGTH), intent(in) :: key
      character(len=VALUE_LENGTH), intent(in) :: value_

      yaml_string = '{' // trim(key) // ': ' // trim(value_) // '}'

   end subroutine make_yaml_string

   @before
   subroutine set_up()

      status = FAILURE
      yaml_string = ''

   end subroutine set_up

   @test
   subroutine test_get_i4()
      integer(kind=ESMF_KIND_I4), parameter :: default_ = 42
      integer(kind=ESMF_KIND_I4) :: expected
      integer(kind=ESMF_KIND_I4) :: actual

      key = 'k_I4'
      value_ = '4'
      actual = -1

      ! Read expected from value_ string
      read(value_, fmt='(I)', iostat = status) expected
      @assertEqual(SUCCESS, status, 'Failed to convert value string ' // trim(value_))

      ! Build YAML string and create hconfig
      call make_yaml_string(key, value_)
      hconfig = ESMF_HConfigCreate(content=yaml_string, rc = status)
      @assertEqual(SUCCESS, status, 'Failed to create ESMF_HConfig from YAML string: ' // yaml_string)

      ! Get resource (expected)
      call MAPL_GetResource(actual, hconfig, key, rc = status)
      @assertEqual(SUCCESS, status, 'Failed to get value for ' // trim(key)) 
      @assertEqual(expected, actual, 'I4: actual does not match expected. [HConfig]')
      
      
      ! Get resource (default)
      key = 'k_nokey'
      actual = -1
      expected = default_
      call MAPL_GetResource(actual, hconfig, key, default=default_, rc = status)
      @assertEqual(SUCCESS, status, 'Failed to get value for ' // trim(key) // ' [default]')
      @assertEqual(expected, actual, 'I4: actual does not match expected. [default]')

   end subroutine test_get_i4

   @test
   subroutine test_get_i8()
   end subroutine test_get_i8

   @test
   subroutine test_get_logical_seq()
   end subroutine test_get_logical_seq

   @test
   subroutine test_get_i8seq()
   end subroutine test_get_i8seq

   @test
   subroutine test_get_r8seq()
   end subroutine test_get_r8seq

   @test
   subroutine test_get_string_seq()
   end subroutine test_get_string_seq

   @after
   subroutine clean_up()

      call ESMF_HConfigDestroy(hconfig)

   end subroutine clean_up

end module Test_HConfigUtils
