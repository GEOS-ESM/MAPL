module Test_HConfigUtils
   use funit
   use ESMF

   implicit none

   type(ESMF_HConfig) :: hconfig
   logical :: hconfig_is_initialized = .FALSE.
   integer :: SUCCESS = 0 
   integer, parameter :: KEY_LENGTH = 80
   integer, parameter :: SEQ_SIZE = 4

   integer(kind=ESMF_KIND_I4), parameter :: expected_i4 = 4
   integer(kind=ESMF_KIND_I4), parameter :: default_i4 = 8
   character(len=KEY_LENGTH), parameter :: I4_key = 'k_I4'
   integer(kind=ESMF_KIND_I4), parameter :: expected_i4seq(SEQ_SIZE) = [16, 32, 64, 128]
   integer(kind=ESMF_KIND_I4), parameter :: default_i4_seq(SEQ_SIZE) = [2, 3, 5, 7]
   character(len=KEY_LENGTH), parameter :: I4seq_key = 'k_I4seq'

contains

   @before
   subroutine setup()
      if(hconfig_is_initialized) return
      call initialize_hconfig(hconfig)
   end subroutine setup
   
   subroutine initialize_hconfig(hconf)
      type(ESMF_HConfig), intent(inout) :: hconf

      if(hconfig_is_initialized) return
      hconf = ESMF_HConfigCreate()
      call ESMF_HConfigAdd(hconf, expected_i4, addKeyString = I4_key)
      hconfig_is_initialized = .TRUE.

   end subroutine initialize_hconfig

   @test
   subroutine test_get_i4()
      character(len=*), parameter :: good_key = trim(I4_key)
      integer(kind=ESMF_KIND_I4), parameter :: expected = expected_i4
      integer(kind=ESMF_KIND_I4), parameter :: default_ = default_i4
      character(len=*), parameter :: bad_key = 'bad_' // good_key
      type(ESMF_HConfig) :: hconfig
      integer(kind=ESMF_KIND_I4) :: actual
      character(len=KEY_LENGTH) :: key

      ! First with a valid key
      key = good_key
      call get_i4(actual, hconfig, key)
      @assertEqual(expected, actual, 'R4: actual does not match expected. [HConfig]')
      
!      key = bad_key
!      call MAPL_GetResource(actual, hconfig, key, default=default_)
!      @assertEqual(default_, actual, 'R4: actual does not match expected. [default]')

   end subroutine test_get_i4

   @test
   subroutine test_get_i8()
   end subroutine test_get_i8

   @test
   subroutine test_get_logical_seq()
   end subroutine test_get_logical_seq

   @test
   subroutine test_get_i8seq()
   end subroutine test_get_i8seq

   @test
   subroutine test_get_r8seq()
   end subroutine test_get_r8seq

   @test
   subroutine test_get_string_seq()
   end subroutine test_get_string_seq

   @after
   subroutine clean_up()
      integer :: status
      call ESMF_HConfigDestroy(hconfig, rc = status)
   end subroutine clean_up

end module Test_HConfigUtils
