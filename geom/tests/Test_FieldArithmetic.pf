#include "MAPL_Generic.h"

module Test_FieldArithmetic

   use geom_setup
   use MAPL_FieldUnaryFunctions
   use MAPL_FieldBinaryOperations
   use MAPL_FieldUtilities
   use MAPL_FieldPointerUtilities
   use ESMF
   use funit
   use MAPL_ExceptionHandling

   implicit none

contains

   @Before
   subroutine set_up_data()
      implicit none

      integer :: status, rc

      real(kind=ESMF_KIND_R4), parameter :: ADD_R4 = 100.0
      real(kind=ESMF_KIND_R8), parameter :: ADD_R8 = 100.0
      real(kind=ESMF_KIND_R4), allocatable :: y4array(:,:)
      real(kind=ESMF_KIND_R8), allocatable :: y8array(:,:)

      allocate(y4array, source=R4_ARRAY_DEFAULT)
      allocate(y8array, source=R8_ARRAY_DEFAULT)
      y4array = y4array + ADD_R4
      y8array = y8array + ADD_R8
      XR4 = mk_field(R4_ARRAY_DEFAULT, regDecomp=REG_DECOMP_DEFAULT, minIndex=MIN_INDEX_DEFAULT, maxIndex=MAX_INDEX_DEFAULT, &
         indexflag=INDEX_FLAG_DEFAULT, name = 'XR4', _RC)
      YR4 = mk_field(y4array, regDecomp=REG_DECOMP_DEFAULT, minIndex=MIN_INDEX_DEFAULT, maxIndex=MAX_INDEX_DEFAULT, &
         indexflag=INDEX_FLAG_DEFAULT, name = 'YR4', _RC)
      XR8 = mk_field(R8_ARRAY_DEFAULT, regDecomp=REG_DECOMP_DEFAULT, minIndex=MIN_INDEX_DEFAULT, maxIndex=MAX_INDEX_DEFAULT, &
         indexflag=INDEX_FLAG_DEFAULT, name = 'XR8', _RC)
      YR8 = mk_field(y8array, regDecomp=REG_DECOMP_DEFAULT, minIndex=MIN_INDEX_DEFAULT, maxIndex=MAX_INDEX_DEFAULT, &
         indexflag=INDEX_FLAG_DEFAULT, name = 'YR8', _RC)
      call ESMF_AttributeSet(xr4,name="missing_value",value=undef,_RC)
      call ESMF_AttributeSet(xr8,name="missing_value",value=undef,_RC)
      call ESMF_AttributeSet(yr4,name="missing_value",value=undef,_RC)
      call ESMF_AttributeSet(yr8,name="missing_value",value=undef,_RC)

   end subroutine set_up_data

   @Test
   subroutine test_FieldAddR4()
      type(ESMF_Field) :: x
      type(ESMF_Field) :: y
      real(kind=ESMF_KIND_R4), pointer :: x_ptr(:,:), y_ptr(:,:)
      real(kind=ESMF_KIND_R4), allocatable :: result_array(:,:)
      integer :: status, rc

      x = XR4
      y = YR4
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)
      call ESMF_FieldGet(y , farrayPtr = y_ptr, _RC)

      x_ptr = 2.0
      y_ptr = 3.0 
      result_array = x_ptr
      result_array = 5.0
      call FieldAdd(y, x, y, _RC)
      @assertEqual(y_ptr, result_array)
   end subroutine test_FieldAddR4

   @Test
   subroutine test_FieldAddR4_missing
      type(ESMF_Field) :: x
      type(ESMF_Field) :: y
      real(kind=ESMF_KIND_R4), pointer :: x_ptr(:,:), y_ptr(:,:)
      real(kind=ESMF_KIND_R4), allocatable :: result_array(:,:)
      integer :: status, rc

      x = XR4
      y = YR4
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)
      call ESMF_FieldGet(y , farrayPtr = y_ptr, _RC)

      x_ptr = reshape(source=[2.0,2.0,2.0,undef],shape=[2,2])
      y_ptr = reshape(source=[undef,3.0,3.0,undef],shape=[2,2])
      result_array = x_ptr
      result_array = reshape(source=[undef,5.0,5.0,undef],shape=[2,2])
      call FieldAdd(y, x, y, _RC)
      @assertEqual(y_ptr, result_array)
   end subroutine test_FieldAddR4_missing

   @Test
   subroutine test_FieldAddR8()
      type(ESMF_Field) :: x
      type(ESMF_Field) :: y
      real(kind=ESMF_KIND_R8), pointer :: x_ptr(:,:), y_ptr(:,:)
      real(kind=ESMF_KIND_R8), allocatable :: result_array(:,:)
      integer :: status, rc

      x = XR8
      y = YR8
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)
      call ESMF_FieldGet(y , farrayPtr = y_ptr, _RC)

      x_ptr = 2.d0
      y_ptr = 3.d0
      result_array = x_ptr
      result_array = 5.d0
      call FieldAdd(y, x, y, _RC)
      @assertEqual(y_ptr, result_array)
   end subroutine test_FieldAddR8

   @Test
   subroutine test_FieldPowR4()
      type(ESMF_Field) :: x
      real(kind=ESMF_KIND_R4), pointer :: x_ptr(:,:)
      real(kind=ESMF_KIND_R4), allocatable :: result_array(:,:)
      integer :: status, rc
      real :: expo

      x = XR4
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)

      x_ptr = 2.0
      expo = 4.0
      result_array = x_ptr
      result_array = 2.0**expo
      call FieldPow(x, x, expo, _RC)
      @assertEqual(x_ptr, result_array)
   end subroutine test_FieldPowR4

   @Test
   subroutine test_FieldPowR8()
      type(ESMF_Field) :: x
      real(kind=ESMF_KIND_R8), pointer :: x_ptr(:,:)
      real(kind=ESMF_KIND_R8), allocatable :: result_array(:,:)
      integer :: status, rc
      real :: expo

      x = XR8
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)

      x_ptr = 2.d0
      expo = 4.0
      result_array = x_ptr
      result_array = 2.d0**expo
      call FieldPow(x, x, expo, _RC)
      @assertEqual(x_ptr, result_array)
   end subroutine test_FieldPowR8

   @Test
   subroutine test_FieldSinR4()
      type(ESMF_Field) :: x
      real(kind=ESMF_KIND_R4), pointer :: x_ptr(:,:)
      real(kind=ESMF_KIND_R4), allocatable :: result_array(:,:)
      integer :: status, rc

      x = XR4
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)

      x_ptr = 2.0
      result_array = x_ptr
      result_array = sin(2.0)
      call FieldSin(x, x, _RC)
      @assertEqual(x_ptr, result_array)
   end subroutine test_FieldSinR4

   @Test
   subroutine test_FieldNegR4()
      type(ESMF_Field) :: x
      real(kind=ESMF_KIND_R4), pointer :: x_ptr(:,:)
      real(kind=ESMF_KIND_R4), allocatable :: result_array(:,:)
      integer :: status, rc

      x = XR4
      call ESMF_FieldGet(x , farrayPtr = x_ptr, _RC)

      x_ptr = 2.0
      result_array = x_ptr
      result_array = -2.0
      call FieldNegate(x, _RC)
      @assertEqual(x_ptr, result_array)
   end subroutine test_FieldNegR4

end module Test_FieldArithmetic
