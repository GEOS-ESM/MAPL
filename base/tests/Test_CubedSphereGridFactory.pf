module Test_CubedSphereGridFactory
   use pfunit
   use ESMF_TestCase_mod
   use ESMF_TestMethod_mod
   use ESMF_TestParameter_mod
   use CubedSphereGridFactoryMod
   use MAPL_ConstantsMod, only: MAPL_PI_R8
   use MAPL_ConstantsMod, only: MAPL_RADIANS_TO_DEGREES
   use MAPL_ConstantsMod, only: MAPL_DEGREES_TO_RADIANS
   use MAPL_RangeMod
   use ESMF
   implicit none

@testParameter
   type, extends(ESMF_TestParameter) :: GridCase
      ! inputs
      integer :: nx
      integer :: ny
      integer :: im_world
      ! outputs
      integer, allocatable :: ims(:)
      integer, allocatable :: jms(:)
      real, allocatable :: lons(:)
      real, allocatable :: lats(:)
   contains
      procedure :: toString
   end type GridCase
   
@testCase(constructor=Test_CubedSphereGridFactory, testParameters={getParameters()})
   type, extends(ESMF_TestCase) :: Test_CubedSphereGridFactory
      integer :: numThreads
      type (CubedSphereGridFactory) :: factory
      type (ESMF_Grid) :: grid
   contains
      procedure :: setUp
      procedure :: tearDown
   end type Test_CubedSphereGridFactory


   interface GridCase
      module procedure GridCase_default_distribution
   end interface GridCase

   interface Test_CubedSphereGridFactory
      module procedure newTest_CubedSphereGridFactory
   end interface Test_CubedSphereGridFactory

   character(len=*), parameter :: resource_file = 'Test_CubedSphereGridFactory.rc'

contains


   function newTest_CubedSphereGridFactory(testParameter) result(aTest)
      type (Test_CubedSphereGridFactory) :: aTest
      class (GridCase), intent(in) :: testParameter

      allocate(aTest%testParameter, source=testParameter)
      select type (p => aTest%testParameter)
      class is (GridCase)
         call p%setNumPETsRequested(p%nx * p%ny)
      end select

   end function newTest_CubedSphereGridFactory


   function GridCase_default_distribution(nx, ny, im_world, ims, jms, lons, lats) result(param)
      integer, intent(in) :: nx, ny
      integer, intent(in) :: im_world
      integer, intent(in) :: ims(:), jms(:)
      real, intent(in) :: lons(:), lats(:) ! in degrees

      type (GridCase) :: param

      param%nx = nx
      param%ny = ny
      param%im_world = im_world

      param%ims = ims
      param%jms = jms

      param%lons = lons
      param%lats = lats

      call param%setNumPETsRequested(nx*ny)
      
   end function GridCase_default_distribution


   subroutine setUp(this)
      class (Test_CubedSphereGridFactory), intent(inout) :: this

      integer :: status
      type (CubedSphereGridFactory) :: factory

      type (ESMF_Config) :: config
      integer :: unit

      if (this%getLocalPET() == 0) then
         select type (p => this%testParameter)
         type is (GridCase)
            call write_config(resource_file, p)
         end select
      end if
      call this%barrier()
      

      config = ESMF_ConfigCreate(rc=status)
      @mpiAssertEqual(ESMF_SUCCESS, 0)

      call ESMF_ConfigLoadFile(config, resource_file, rc=status)
      @mpiAssertEqual(ESMF_SUCCESS, 0)

      call this%barrier()
      if (this%getLocalPET() == 0) then
         open (newunit=unit, file=resource_file)
         close(unit, status='delete')
      end if

      call this%factory%initialize(config, rc=status)
      @mpiAssertEqual(ESMF_SUCCESS, 0)

      call ESMF_ConfigDestroy(config, rc=status)
      @mpiAssertEqual(ESMF_SUCCESS, 0)

      this%grid = this%factory%make_geos_grid()

   contains

      subroutine write_config(file_name, param)
         character(len=*), intent(in) :: file_name
         type (GridCase), intent(in) :: param

         integer :: unit

         open(newunit=unit, file=file_name, form='formatted', status='unknown')
         write(unit,*)'NX: ', param%nx
         write(unit,*)'NY: ', param%ny
         write(unit,*)'IM_WORLD: ', param%im_world
         close(unit)

      end subroutine write_config

   end subroutine setUp


   subroutine tearDown(this)
      class (Test_CubedSphereGridFactory), intent(inout) :: this

      call ESMF_GridDestroy(this%grid)
      
   end subroutine tearDown


   function getParameters() result(params)
      type (GridCase), allocatable :: params(:)

      params = [ &
           & GridCase(1, 1, 4, [4], [4], [-180., -90., 0., 90.], [-45., 45.]), & 
           & GridCase(2, 1, 4, [2,2], [4], [-180., -90., 0., 90.], [-45., 45.]), &
           & GridCase(1, 2, 4, [4], [2,2], [-180., -90., 0., 90.], [-45., 45.]) &
           ]

   end function getParameters


   @test
   subroutine test_shape(this)
      class (Test_CubedSphereGridFactory), intent(inout) :: this

      integer :: status
      integer, parameter :: SUCCESS = 0
      real(ESMF_KIND_R8), pointer :: centers(:,:)

      integer :: petX, petY

      select type (p => this%testParameter)
      type is (GridCase)
         petX = mod(this%getLocalPET(), p%nx)
         petY = this%getLocalPET() / p%nx
      end select

      ! X
      call ESMF_GridGetCoord(this%grid, coordDim=1, staggerLoc=ESMF_STAGGERLOC_CENTER, &
           & farrayPtr=centers, rc=status)
      @mpiAssertTrue(status==SUCCESS, message='Failed to get grid x centers.')

      select type (p => this%testparameter)
      type is (GridCase)
         @mpiAssertEqual([p%ims(petX+1),p%jms(petY+1)], shape(centers), message='Wrong shape.')
      end select

      ! Y
      call ESMF_GridGetCoord(this%grid, coordDim=2, staggerLoc=ESMF_STAGGERLOC_CENTER, &
           & farrayPtr=centers, rc=status)
      @mpiAssertTrue(status==SUCCESS, message='Failed to geet grid x centers.')

      select type (p => this%testparameter)
      type is (GridCase)
         @mpiAssertEqual([p%ims(petX+1),p%jms(petY+1)], shape(centers), message='Wrong shape.')
      end select
      
   end subroutine test_shape

   @test
   subroutine test_centers(this)
      class (Test_CubedSphereGridFactory), intent(inout) :: this

      integer :: status
      integer, parameter :: SUCCESS = 0
      real(ESMF_KIND_R8), pointer :: centers(:,:)

      integer :: petX, petY
      integer :: i_1, i_n, j_1, j_n

      select type (p => this%testParameter)
      type is (GridCase)
         petX = 1 + mod(this%getLocalPET(), p%nx)
         petY = 1 + this%getLocalPET() / p%nx
         i_1 = 1 + sum(p%ims(:petX-1))
         i_n = sum(p%ims(:petX))
         j_1 = 1 + sum(p%jms(:petY-1))
         j_n = sum(p%jms(:petY))
      end select

      ! X
      call ESMF_GridGetCoord(this%grid, coordDim=1, staggerLoc=ESMF_STAGGERLOC_CENTER, &
           & farrayPtr=centers, rc=status)
      @mpiAssertTrue(status==SUCCESS, message='Failed to get grid x centers.')

      select type (p => this%testparameter)
      type is (GridCase)
         @mpiAssertEqual(p%lons(i_1:i_n), centers(:,1)*MAPL_RADIANS_TO_DEGREES, message='Wrong centers.', tolerance=1.d-5)
      end select

      ! Y
      call ESMF_GridGetCoord(this%grid, coordDim=2, staggerLoc=ESMF_STAGGERLOC_CENTER, &
           & farrayPtr=centers, rc=status)
      @mpiAssertTrue(status==SUCCESS, message='Failed to geet grid x centers.')

      select type (p => this%testparameter)
      type is (GridCase)
         @mpiAssertEqual(p%lats(j_1:j_n), centers(1,:)*MAPL_RADIANS_TO_DEGREES, message='Wrong centers.', tolerance=1.d-5)
      end select
      
   end subroutine test_centers


   function toString(this) result(string)
      character(len=:), allocatable :: string
      class (GridCase), intent(in) :: this

      character(len=1) :: buf

      write(buf,'(i1)') this%nx
      string = '{nx:'//buf

      write(buf,'(i1)') this%nx
      string = string // ',ny:'//buf

      string = string // '}'

   end function toString

end module Test_CubedSphereGridFactory
