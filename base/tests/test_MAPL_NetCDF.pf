#include "MAPL_Exceptions.h"
#include "MAPL_ErrLog.h"
!===============================================================================
! TEST_MAPL_NETCDF
!===============================================================================
module test_MAPL_NetCDF

   use test_MAPL_NetCDF_helpers
   use MAPL_ExceptionHandling
   use MAPL_NetCDF
   use ESMF
   use pfunit

   implicit none

   type(ESMF_CalKind_Flag), parameter :: CALKIND_FLAG_DEF = ESMF_CALKIND_GREGORIAN
   integer, parameter :: SECONDS_PER_MINUTE = 60

contains

   @Before
   subroutine set_up()
      integer :: status

      call ESMF_CalendarSetDefault(CALKIND_FLAG_DEF, rc=status)
      if(status /= SUCCESS) write(*, *) 'Failed to set ESMF_Calendar'

   end subroutine set_up

   @Test
   subroutine test_get_NetCDF_duration_from_ESMF_Time_integer()
      type(ESMF_Time) :: time
      character(len=:), allocatable :: units_string
      integer :: duration, expected_duration
      character(len=:), allocatable :: units
      character(len=:), allocatable :: preposition
      integer :: yy, mm, dd, h, m, s, m_time
      integer :: status

      yy = 1999
      mm = 12
      dd = 31
      h = 23
      m = 29
      m_time = 59
      s = 59
      units = 'seconds'
      preposition = 'since'
      expected_duration = (m_time - m) * SECONDS_PER_MINUTE

      units_string = make_units_string(units, preposition, yy, mm, dd, h, m, s)
      @assertTrue(len_trim(units_string) > 0, 'Failed to make units_string')

      call ESMF_TimeSet(time, yy=yy, mm=mm, dd=dd, h=h, m=m_time, s=s, rc = status)
      @assertTrue(status == SUCCESS, 'Failed to create ESMF_Time')

      call get_NetCDF_duration_from_ESMF_Time(time, units_string, duration, rc=status)
      @assertTrue(status == SUCCESS, 'Failed to get duration time')
      @assertEqual(expected_duration, duration, 'Actual duration does not match expected duration.')

   end subroutine test_get_NetCDF_duration_from_ESMF_Time_integer

   @Test
   subroutine test_get_NetCDF_duration_from_ESMF_Time_real()
      type(ESMF_Time) :: time
      character(len=:), allocatable :: units_string
      real(kind=ESMF_KIND_R8) :: duration, expected_duration
      character(len=:), allocatable :: units
      character(len=:), allocatable :: preposition
      integer :: yy, mm, dd, h, m, s, m_time
      integer :: status

      yy = 1999
      mm = 12
      dd = 31
      h = 23
      m = 29
      m_time = 59
      s = 59
      units = 'seconds'
      preposition = 'since'
      expected_duration = (m_time - m) * SECONDS_PER_MINUTE

      units_string = make_units_string(units, preposition, yy, mm, dd, h, m, s)
      @assertTrue(len_trim(units_string) > 0, 'Failed to make units_string')

      call ESMF_TimeSet(time, yy=yy, mm=mm, dd=dd, h=h, m=m_time, s=s, rc = status)
      @assertTrue(status == SUCCESS, 'Failed to create time')

      call get_NetCDF_duration_from_ESMF_Time(time, units_string, duration, rc=status)
      @assertTrue(status == SUCCESS, 'Failed to get duration time')
      @assertEqual(expected_duration, duration, 'Actual duration does not match expected duration.')

   end subroutine test_get_NetCDF_duration_from_ESMF_Time_real

   @Test
   subroutine test_get_ESMF_Time_from_NetCDF_DateTime_integer()
      integer :: duration
      integer :: yy, mm, dd, h, m, s, m_time
      character(len=:), allocatable :: units
      character(len=:), allocatable :: preposition
      character(len=:), allocatable :: units_string
      type(ESMF_Time) :: time, etime
      integer :: status

      yy = 1999
      mm = 12
      dd = 31
      h = 23
      m = 29
      m_time = 59
      s = 59
      units = 'seconds'
      preposition = 'since'
      duration = ( m_time - m ) * SECONDS_PER_MINUTE

      units_string = make_units_string(units, preposition, yy, mm, dd, h, m, s)
      @assertTrue(len_trim(units_string) > 0, "Failed to make units_string")

      call ESMF_TimeSet(etime, yy=yy, mm=mm, dd=dd, h=h, m=m_time, s=s, rc=status)
      @assertTrue(status == SUCCESS, 'Unable to create expected ESMF_Time')

      call get_ESMF_Time_from_NetCDF_DateTime(duration, units_string, time, rc = status)
      @assertTrue(status == SUCCESS, 'Conversion failed')

      @assertTrue(ESMF_Times_Equal(etime, time), 'ESMF_Time values do not match.')

   end subroutine test_get_ESMF_Time_from_NetCDF_DateTime_integer

   @Test
   subroutine test_get_ESMF_Time_from_NetCDF_DateTime_real()
      real(kind=ESMF_KIND_R8) :: duration
      integer :: yy, mm, dd, h, m, s, m_time
      character(len=:), allocatable :: units
      character(len=:), allocatable :: preposition
      character(len=:), allocatable :: units_string
      type(ESMF_Time) :: time, etime
      integer :: status

      yy = 1999
      mm = 12
      dd = 31
      h = 23
      m = 29
      m_time = 59
      s = 59
      units = 'seconds'
      preposition = 'since'
      duration = ( m_time - m ) * SECONDS_PER_MINUTE

      units_string = make_units_string(units, preposition, yy, mm, dd, h, m, s)
      @assertTrue(len_trim(units_string) > 0, 'Failed to make units_string')

      call ESMF_TimeSet(etime, yy=yy, mm=mm, dd=dd, h=h, m=m_time, s=s, rc=status)
      @assertTrue(status == SUCCESS, 'Unable to create expected ESMF_Time')

      call get_ESMF_Time_from_NetCDF_DateTime(duration, units_string, time, rc = status)
      @assertTrue(status == SUCCESS, 'Conversion failed')

      @assertTrue(ESMF_Times_Equal(etime, time), 'ESMF_Time values do not match.')

   end subroutine test_get_ESMF_Time_from_NetCDF_DateTime_real

end module test_MAPL_NetCDF
