module Test_RegridderManager
   use pfunit
   use mapl3g_regridder_mgr
   use mapl3g_geom_mgr
   use esmf_TestMethod_mod ! mapl
   use esmf
   implicit none

contains

   ! Helper procedures
   ! TODO add error handling to helper procedures
   
   function make_geom(geom_mgr, hconfig) result(geom)
      type(ESMF_Geom) :: geom
      type(GeomManager), intent(inout) :: geom_mgr
      type(ESMF_HConfig), optional, intent(in) :: hconfig

      type(MaplGeom), pointer :: mapl_geom
      class(GeomSpec), allocatable :: spec
      integer :: status
      type(ESMF_HConfig) :: hconfig_

      hconfig_ = ESMF_HConfigCreate(content="{im_world: 12, jm_world: 13, pole: PC, dateline: DC, nx: 1, ny: 1}", rc=status)
      if (present(hconfig)) hconfig_ = hconfig

      spec = geom_mgr%make_geom_spec(hconfig_, rc=status)
      mapl_geom => geom_mgr%get_mapl_geom(spec, rc=status)
      geom = mapl_geom%get_geom()
   end function make_geom

   function make_field(geom, name, value) result(field)
      type(ESMF_Field) :: field
      type(ESMF_Geom), intent(in) :: geom
      character(*), intent(in) :: name
      real(kind=ESMF_KIND_R4), intent(in) :: value

      real(kind=ESMF_KIND_R4), pointer :: x(:,:)
      integer :: status

      field = ESMF_FieldEmptyCreate(name=name, rc=status)
      call ESMF_FieldEmptySet(field, geom, rc=status)
      call ESMF_FieldEmptyComplete(field, typekind=ESMF_TypeKind_R4, rc=status)
      call ESMF_FieldGet(field, farrayptr=x,rc=status)
      x = value

   end function make_field

   @test(type=ESMF_TestMethod, npes=[1])
   ! Just execute a series of plausible commands and ensure that no
   ! failures are indicated Regrid a constant field onto identical
   ! geometry should not change any values.
   subroutine test_basic(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(GeomManager) :: geom_mgr
      type(RegridderManager) :: regridder_mgr
      type(RegridderSpec) :: regridder_spec
      integer :: status
      class(Regridder), pointer :: my_regridder
      type(ESMF_Geom) :: geom

      type(ESMF_Field) :: f1, f2
      real(kind=ESMF_KIND_R4), pointer :: x(:,:)

      geom_mgr = GeomManager()
      regridder_mgr = RegridderManager()

      geom = make_geom(geom_mgr)

      ! use default esmf regrid parameters: method, zero region, etc
      regridder_spec = RegridderSpec(EsmfRegridderParam(), geom, geom)

      my_regridder => regridder_mgr%get_regridder(regridder_spec, rc=status)
      @assert_that(status, is(0))

      f1 = make_field(geom, 'f1', value=3._ESMF_KIND_R4)
      f2 = make_field(geom, 'f2', value=0._ESMF_KIND_R4)

      call my_regridder%regrid(f1, f2, rc=status)
      @assert_that(status, is(0))

      call ESMF_FieldGet(f2, farrayptr=x,rc=status)
      @assert_that(status, is(0))
      @assert_that(x, every_item(is(equal_to(3._ESMF_KIND_R4))))

   end subroutine test_basic

   @test(type=ESMF_TestMethod, npes=[1])
   ! Test that identical spec returns same regridder object.  I.e.,
   ! that the manager is properly caching.
   subroutine test_reuse_regridder(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(GeomManager) :: geom_mgr
      type(RegridderManager), target :: regridder_mgr
      type(RegridderSpec) :: regridder_spec
      integer :: status
      class(Regridder), pointer :: regridder_1, regridder_2
      type(ESMF_Geom) :: geom

      geom_mgr = GeomManager()
      regridder_mgr = RegridderManager()

      geom = make_geom(geom_mgr)

      regridder_spec = RegridderSpec(EsmfRegridderParam(), geom, geom)

      regridder_1 => regridder_mgr%get_regridder(regridder_spec, rc=status)
      @assert_that(status, is(0))

      regridder_2 => regridder_mgr%get_regridder(regridder_spec, rc=status)
      @assert_that(status, is(0))

      @assertTrue(associated(regridder_2, regridder_1))
   end subroutine test_reuse_regridder

   @test(type=ESMF_TestMethod, npes=[1])
   ! Test that different spec returns different regridder object.  I.e.,
   ! that the manager is properly caching.
   subroutine test_do_not_reuse_regridder(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(GeomManager) :: geom_mgr
      type(RegridderManager), target :: regridder_mgr
      type(RegridderSpec) :: spec_1, spec_2
      integer :: status
      class(Regridder), pointer :: regridder_1, regridder_2
      type(ESMF_Geom) :: geom_1, geom_2
      type(ESMF_HConfig) :: hconfig

      geom_mgr = GeomManager()
      regridder_mgr = RegridderManager()

      geom_1 = make_geom(geom_mgr)

      hconfig = ESMF_HConfigCreate(content="{im_world: 12, jm_world: 11, pole: PC, dateline: DC, nx: 1, ny: 1}", rc=status)
      geom_2 = make_geom(geom_mgr, hconfig) ! variant of geom_1

      spec_1 = RegridderSpec(EsmfRegridderParam(), geom_1, geom_1)
      regridder_1 => regridder_mgr%get_regridder(spec_1, rc=status)
      @assert_that(status, is(0))

      spec_2 = RegridderSpec(EsmfRegridderParam(), geom_1, geom_2)
      regridder_2 => regridder_mgr%get_regridder(spec_2, rc=status)
      @assert_that(status, is(0))

      @assertFalse(associated(regridder_1, regridder_2))
   end subroutine test_do_not_reuse_regridder

   @test(type=ESMF_TestMethod, npes=[1])
   ! Test realistic regridding.  A checkerboard input field (in
   ! longitude) with constant spacing should produce a constant output
   ! grid with default bilinear regrid method.
   subroutine test_regrid_values(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(GeomManager) :: geom_mgr
      type(RegridderManager), target :: regridder_mgr
      type(RegridderSpec) :: spec
      integer :: status
      class(Regridder), pointer :: my_regridder
      type(ESMF_Geom) :: geom_1, geom_2
      type(ESMF_HConfig) :: hconfig
      type(ESMF_Field) :: f1, f2
      real(kind=ESMF_KIND_R4), pointer :: x1(:,:)
      real(kind=ESMF_KIND_R4), pointer :: x2(:,:)

      geom_mgr = GeomManager()
      regridder_mgr = RegridderManager()

      hconfig = ESMF_HConfigCreate(content="{im_world: 12, jm_world: 11, pole: PC, dateline: DE, nx: 1, ny: 1}", rc=status)
      geom_1 = make_geom(geom_mgr, hconfig)

      hconfig = ESMF_HConfigCreate(content="{im_world: 6, jm_world: 5, pole: PC, dateline: DE, nx: 1, ny: 1}", rc=status)
      geom_2 = make_geom(geom_mgr, hconfig) ! variant of geom_1

      spec = RegridderSpec(EsmfRegridderParam(regridmethod=ESMF_REGRIDMETHOD_CONSERVE), geom_1, geom_2)
      my_regridder => regridder_mgr%get_regridder(spec, rc=status)
      @assert_that(status, is(0))

      f1 = make_field(geom_1, 'f1', value=2._ESMF_KIND_R4)
      call ESMF_FieldGet(f1, farrayptr=x1)
      x1(2::2,:) = 0 ! checkerboard
      
      f2 = make_field(geom_2, 'f2', value=0._ESMF_KIND_R4)

      ! (0 + 2)/2 == 1
      call my_regridder%regrid(f1, f2, rc=status)
      @assert_that(status, is(0))

      call ESMF_FieldGet(f2, farrayptr=x2,rc=status)
 
      @assert_that(status, is(0))
      @assert_that(x2, every_item(is(equal_to(1._ESMF_KIND_R4))))
   end subroutine test_regrid_values

   end module Test_RegridderManager

