module Test_StringUtilities
   use mapl_StringUtilities
   use gftl2_StringVector
   use funit
   implicit none

contains


   @test
   subroutine test_to_lower()
      character(:), allocatable :: s_in, s_out, s_expected

      s_in = 'abcd12)8'
      s_expected = 'abcd12)8'
      s_out = to_lower(s_in)
      @assert_that(s_out, is(equal_to(s_expected)))

      s_in = 'aBcD12)8'
      s_expected = 'abcd12)8'
      s_out = to_lower(s_in)
      @assert_that(s_out, is(equal_to(s_expected)))

   end subroutine test_to_lower

   @test
   subroutine test_to_upper()
      character(:), allocatable :: s_in, s_out, s_expected

      s_in = 'ABCD12)8'
      s_expected = 'ABCD12)8'
      s_out = to_upper(s_in)
      @assert_that(s_out, is(equal_to(s_expected)))

      s_in = 'aBcD12)8'
      s_expected = 'ABCD12)8'
      s_out = to_upper(s_in)
      @assert_that(s_out, is(equal_to(s_expected)))

   end subroutine test_to_upper

   @test
   subroutine test_split()
      character(:), allocatable :: s_in
      type(StringVector) :: s_out

      ! Non-present string returns empty vector.
      s_out = split()
      @assert_that(int(s_out%size()), is(0))

      s_in = ''
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('', s_out%of(1))

      s_in = 'a'
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('a', s_out%of(1))

      s_in = 'b'
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('b', s_out%of(1))

      s_in = ','
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(2))
      @assertEqual('', s_out%of(1))
      @assertEqual('', s_out%of(2))

      s_in = 'a,b,c,'
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(4))
      @assertEqual('a', s_out%of(1))
      @assertEqual('b', s_out%of(2))
      @assertEqual('c', s_out%of(3))
      @assertEqual('', s_out%of(4))

   end subroutine test_split

   @test
   subroutine test_split_alt_delim()
      character(:), allocatable :: s_in
      type(StringVector) :: s_out

      ! Non-present string returns empty vector.
      s_out = split(delim=':')
      @assert_that(int(s_out%size()), is(0))

      s_in = ''
      s_out = split(s_in, delim=':')
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('', s_out%of(1))


      s_in = 'a'
      s_out = split(s_in, delim=':')
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('a', s_out%of(1))

      ! Not the right delimiter ...
      s_in = ','
      s_out = split(s_in, delim=':')
      @assert_that(int(s_out%size()), is(1))
      @assertEqual(',', s_out%of(1))


      ! The right delimiter ...
      s_in = ':'
      s_out = split(s_in, delim=':')
      @assert_that(int(s_out%size()), is(2))
      @assertEqual('', s_out%of(1))
      @assertEqual('', s_out%of(2))

      ! Mixed?
      s_in = 'a,b:c,'
      s_out = split(s_in, delim=':')
      @assert_that(int(s_out%size()), is(2))
      @assertEqual('a,b', s_out%of(1))
      @assertEqual('c,', s_out%of(2))

   end subroutine test_split_alt_delim

   @test
   subroutine test_split_ignore_white_space()
      character(:), allocatable :: s_in
      type(StringVector) :: s_out
      character(:), allocatable :: s

      s_in = 'a '
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('a', s_out%of(1), whitespace=KEEP_ALL)

      s_in = ' a'
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('a', s_out%of(1), whitespace=KEEP_ALL)


      s_in = 'a, b , c '
      s_out = split(s_in)
      @assert_that(int(s_out%size()), is(3))
      @assertEqual('a', s_out%of(1), whitespace=KEEP_ALL)
      @assertEqual('b', s_out%of(2), whitespace=KEEP_ALL)
      @assertEqual('c', s_out%of(3), whitespace=KEEP_ALL)

   end subroutine test_split_ignore_white_space

   @test
   subroutine test_split_preserve_white_space()
      character(:), allocatable :: s_in
      type(StringVector) :: s_out
      character(:), allocatable :: s

      s_in = 'a '
      s_out = split(s_in, preserve_whitespace=.true.)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual('a ', s_out%of(1), whitespace=KEEP_ALL)

      s_in = ' a'
      s_out = split(s_in, preserve_whitespace=.true.)
      @assert_that(int(s_out%size()), is(1))
      @assertEqual(' a', s_out%of(1), whitespace=KEEP_ALL)


      s_in = 'a, b , c '
      s_out = split(s_in, preserve_whitespace=.true.)
      @assert_that(int(s_out%size()), is(3))
      @assertEqual('a', s_out%of(1), whitespace=KEEP_ALL)
      @assertEqual(' b ', s_out%of(2), whitespace=KEEP_ALL)
      @assertEqual(' c ', s_out%of(3), whitespace=KEEP_ALL)

   end subroutine test_split_preserve_white_space

end module Test_StringUtilities
