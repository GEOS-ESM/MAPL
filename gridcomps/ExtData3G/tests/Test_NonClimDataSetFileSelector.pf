#include "MAPL_TestErr.h"
module Test_NonClimDataSetFileSelector
   use pfunit
   use mapl3g_DataSetNode
   use mapl3g_DataSetBracket
   use mapl3g_NonClimDataSetFileSelector
   use mapl3g_DataSetNode
   use mapl3g_DataSetBracket
   use esmf

   implicit none

contains


   @test
   subroutine test_NonClimDataSetFileSelector_get_any_file()
      integer :: status
      type(NonClimDataSetFileSelector) :: file_handler

      character(len=:), allocatable :: template, sample_file
      type(ESMF_Time) :: ref_time
      type(ESMF_TimeInterval) :: file_frequency

      template = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.%y4%m2%d2_%h200z.nc4"
      call ESMF_TimeSet(ref_time, yy=2004, mm=1, dd=31, h=21, m=0, s=0, _RC)
      call ESMF_TimeIntervalSet(file_frequency, h=1, _RC)
     
      file_handler = NonClimDataSetFileSelector(template, ref_time=ref_time, file_frequency=file_frequency, _RC) 
      sample_file = file_handler%find_any_file(_RC)
      
      @assertTrue(sample_file == "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2100z.nc4")

   end subroutine Test_NonClimDataSetFileSelector_get_any_file

   @test
   subroutine test_establish_both_brackets_from_scratch_hourly()
      integer :: status
      type(NonClimDataSetFileSelector) :: file_handler
      character(len=:), allocatable :: template, expected_file, found_file
      type(ESMF_Time) :: ref_time, current_time
      type(ESMF_TimeInterval) :: file_frequency, timeStep
      type(DataSetNode) :: left_node, right_node

      template = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.%y4%m2%d2_%h200z.nc4"
      call ESMF_TimeSet(ref_time, yy=2004, mm=1, dd=31, h=21, m=0, s=0, _RC)
      call ESMF_TimeIntervalSet(file_frequency, h=1, _RC)
      call ESMF_TimeIntervalSet(timeStep, h=1, _RC)
      call ESMF_TimeSet(current_time, yy=2004, mm=1, dd=31, h=23, m=10, s=0, _RC)
     
      file_handler = NonClimDataSetFileSelector(template, ref_time=ref_time, file_frequency=file_frequency, timeStep=timeStep,  _RC)
      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2300z.nc4"
      call left_node%set_node_side(NODE_LEFT)
      call file_handler%update_node(current_time, left_node, _RC)
      call left_node%get_file(found_file)
      @assertTrue(expected_file == found_file)

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_0000z.nc4"
      call right_node%set_node_side(NODE_RIGHT)
      call file_handler%update_node(current_time, right_node, _RC)
      call right_node%get_file(found_file) 
      @assertTrue(expected_file == found_file)

   end subroutine test_establish_both_brackets_from_scratch_hourly
       
   @test
   subroutine test_hourly_update_file_bracket()
      integer :: status
      type(NonClimDataSetFileSelector) :: file_handler

      type(ESMF_Time) :: current_time, ref_time
      type(ESMF_TimeInterval) :: file_frequency, timeStep
      type(DataSetNode) :: left_node, right_node
      type(DataSetBracket) :: bracket
      character(len=:), allocatable :: template, expected_file, found_file
      logical :: update

      template = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.%y4%m2%d2_%h200z.nc4"
      call ESMF_TimeSet(ref_time, yy=2004, mm=1, dd=31, h=21, m=0, s=0, _RC)
      call ESMF_TimeIntervalSet(timeStep, h=1, _RC)
      call ESMF_TimeIntervalSet(file_frequency, h=1, _RC)
     
      file_handler = NonClimDataSetFileSelector(template, ref_time=ref_time, file_frequency=file_frequency, timeStep=timeStep,  _RC)
      call right_node%set_node_side(NODE_RIGHT)
      call left_node%set_node_side(NODE_LEFT)
      call bracket%set_node(NODE_LEFT, left_node, _RC)
      call bracket%set_node(NODE_RIGHT, right_node, _RC)
     
      call ESMF_TimeSet(current_time, yy=2004, mm=1, dd=31, h=23, m=10, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2300z.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_0000z.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      call ESMF_TimeSet(current_time, yy=2004, mm=1, dd=31, h=23, m=20, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2300z.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .false.) 

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_0000z.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .false.) 

      call ESMF_TimeSet(current_time, yy=2004, mm=2, dd=1, h=0, m=20, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_0000z.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .false.) 

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_0100z.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

   end subroutine test_hourly_update_file_bracket

   @test
   subroutine test_persist_update_file_bracket()
      integer :: status
      type(NonClimDataSetFileSelector) :: file_handler

      type(ESMF_Time) :: current_time, ref_time, valid_range(2)
      type(ESMF_TimeInterval) :: file_frequency, timeStep
      type(DataSetNode) :: left_node, right_node
      type(DataSetBracket) :: bracket
      character(len=:), allocatable :: template, expected_file, found_file
      logical :: update, enabled

      template = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.%y4%m2%d2_%h200z.nc4"
      call ESMF_TimeSet(ref_time, yy=2004, mm=1, dd=31, h=21, m=0, s=0, _RC)
      call ESMF_TimeIntervalSet(file_frequency, h=1, _RC)
      call ESMF_TimeIntervalSet(timeStep, h=1, _RC)
      call ESMF_TimeSet(valid_range(1), yy=2004, mm=1, dd=31, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(valid_range(2), yy=2004, mm=2, dd=1, h=20, m=0, s=0, _RC)
     
      file_handler = NonClimDataSetFileSelector(template, ref_time=ref_time, file_frequency=file_frequency, valid_range=valid_range, timeStep=timeStep, persist_closest=.true.,  _RC)
      call right_node%set_node_side(NODE_RIGHT)
      call left_node%set_node_side(NODE_LEFT)
      call bracket%set_node(NODE_LEFT, left_node, _RC)
      call bracket%set_node(NODE_RIGHT, right_node, _RC)
     
      ! set time after valid range, so left should be updated
      call ESMF_TimeSet(current_time, yy=2004, mm=2, dd=2, h=23, m=10, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_2000z.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      enabled = right_node%get_enabled()
      update = right_node%get_update()
      @assertTrue(enabled .eqv. .false.) 
      @assertTrue(update .eqv. .false.) 
     
      ! set time before valid range, so right should be updated
      call ESMF_TimeSet(current_time, yy=2004, mm=1, dd=2, h=23, m=10, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2100z.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      enabled = left_node%get_enabled()
      update = left_node%get_update()
      @assertTrue(enabled .eqv. .false.) 
      @assertTrue(update .eqv. .false.) 

      ! now put smack in middle of valid range
      call ESMF_TimeSet(current_time, yy=2004, mm=1, dd=31, h=21, m=10, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2100z.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040131_2200z.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      call ESMF_TimeSet(current_time, yy=2004, mm=2, dd=1, h=18, m=10, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_1800z.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      expected_file = "/home/bmauer/extdata3g_test_data/hourly_files/hourly_files.20040201_1900z.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

   end subroutine test_persist_update_file_bracket

   @test
   subroutine test_monthly_update_file_bracket()
      integer :: status
      type(NonClimDataSetFileSelector) :: file_handler

      type(ESMF_Time) :: current_time, ref_time
      type(ESMF_TimeInterval) :: file_frequency, timeStep
      type(DataSetNode) :: left_node, right_node
      type(DataSetBracket) :: bracket
      character(len=:), allocatable :: template, expected_file, found_file
      logical :: update

      template = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.%y4%m2.nc4"
      call ESMF_TimeSet(ref_time, yy=2004, mm=1, dd=1, h=0, m=0, s=0, _RC)
      call ESMF_TimeIntervalSet(timeStep, h=1, _RC)
      call ESMF_TimeIntervalSet(file_frequency, mm=1, _RC)
     
      file_handler = NonClimDataSetFileSelector(template, ref_time=ref_time, file_frequency=file_frequency, timeStep=timeStep, _RC)
      call right_node%set_node_side(NODE_RIGHT)
      call left_node%set_node_side(NODE_LEFT)
      call bracket%set_node(NODE_LEFT, left_node, _RC)
      call bracket%set_node(NODE_RIGHT, right_node, _RC)
     
      call ESMF_TimeSet(current_time, yy=2004, mm=6, dd=14, h=23, m=0, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.200405.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      expected_file = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.200406.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

      call ESMF_TimeSet(current_time, yy=2004, mm=6, dd=14, h=23, m=20, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.200405.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .false.) 

      expected_file = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.200406.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .false.) 

      call ESMF_TimeSet(current_time, yy=2004, mm=6, dd=15, h=0, m=10, s=0, _RC)
      call file_handler%update_file_bracket(current_time, bracket, _RC)
      left_node = bracket%get_left_node()
      right_node = bracket%get_right_node()

      expected_file = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.200406.nc4"
      call left_node%get_file(found_file) 
      update = left_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .false.) 

      expected_file = "/home/bmauer/extdata3g_test_data/monthly_files/monthly_files.200407.nc4"
      call right_node%get_file(found_file) 
      update = right_node%get_update()
      @assertTrue(expected_file == found_file)
      @assertTrue(update .eqv. .true.) 

   end subroutine test_monthly_update_file_bracket

end module Test_NonClimDataSetFileSelector
