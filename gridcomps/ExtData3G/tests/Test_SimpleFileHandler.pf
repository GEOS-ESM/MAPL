#include "MAPL_TestErr.h"
module Test_SimpleFileHandler
   use pfunit
   use mapl3g_ExtDataNode
   use mapl3g_ExtDataBracket
   use mapl3g_SimpleFileHandler
   use mapl3g_ExtDataNode
   use mapl3g_ExtDataBracket
   use esmf

   implicit none

contains


   @test
   subroutine test_SimpleFileHandler_get_any_file()
      integer :: status
      type(SimpleFileHandler) :: file_handler

      character(len=:), allocatable :: template, sample_file
      type(ESMF_Time) :: ref_time
      type(ESMF_TimeInterval) :: frequency

      template = "data_sets/hourly_files/hourly_files.%y4%m2%d2_%h200z.nc4"
      call ESMF_TimeSet(ref_time, yy=2004, mm=1, dd=31, h=21, m=0, s=0, _RC)
      call ESMF_TimeIntervalSet(frequency, h=1, _RC)
     
      file_handler = SimpleFileHandler(template, ref_time=ref_time, frequency=frequency, _RC) 
      sample_file = file_handler%find_any_file(_RC)
      
      @assertTrue(sample_file == "data_sets/hourly_files/hourly_files.20040131_2100z.nc4")

   end subroutine Test_SimpleFileHandler_get_any_file

   @test
   subroutine test_SimpleFileHandler_update_node_from_file()
      integer :: status

      type(ESMF_Time) :: current_time, file_time, expected_file_time
      type(ExtDataNode) :: node
      character(len=:), allocatable :: trial_file, node_file, expected_file
      type(SimpleFileHandler) :: file_handler
      integer :: time_index, expected_time_index

      trial_file = "data_sets/twelve_month_file/climatology.2004.nc4"
      call node%set_node_side(left_node)
      call ESMF_TimeSet(current_time, yy=2004, mm=3, dd=3, h=0, m=0, s=0, _RC)
      call ESMF_TimeSet(expected_file_time, yy=2004, mm=2, dd=15, h=21, m=0, s=0, _RC)
      expected_file = trial_file 
      expected_time_index = 2
      call file_handler%update_node_from_file(trial_file, current_time, node, _RC)
      file_time = node%get_file_time()
      time_index = node%get_time_index() 
      node_file = node%get_file()
      @assertTrue(time_index == expected_time_index) 
      @assertTrue(file_time == expected_file_time)
      @assertTrue(node_file == expected_file)

   end subroutine test_SimpleFileHandler_update_node_from_file

end module Test_SimpleFileHandler
