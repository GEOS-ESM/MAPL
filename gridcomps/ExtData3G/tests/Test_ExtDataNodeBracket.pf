#include "MAPL_TestErr.h"
module Test_ExtDataNodeBracket
   use pfunit
   use mapl3g_DataSetNode
   use mapl3g_DataSetBracket
   use esmf

   implicit none

contains


   @test
   subroutine test_extdata_node()
      integer :: status
      type(DataSetNode) :: node1, node2

      type(ESMF_Time) :: interp_time1, interp_time2
      type(ESMF_Time) :: file_time1, file_time2
      integer :: index1, index2 
      character(len=:), allocatable :: file1, file2, file

      call ESMF_TimeSet(interp_time1,yy=2000, mm=4, dd=14, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(interp_time2,yy=2000, mm=4, dd=14, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(file_time1,yy=2000, mm=4, dd=14, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(file_time2,yy=2000, mm=4, dd=14, h=21, m=0, s=0, _RC)
      index1 = 1
      index2 = 1
      file1 = "foo.nc4"
      file2 = "foo.nc4"
      node1 = DataSetNode(file1, index1, file_time1, interp_time1, .true., .true.)
      node2 = DataSetNode(file2, index2, file_time2, interp_time2, .true., .true.)
      @assertTrue(node1==node2)

      file = node1%get_file()
      @assertTrue(file=="foo.nc4")

   end subroutine test_extdata_node

   @test 
   subroutine test_bracket()
      integer :: status
      type(DataSetNode) :: node1, node2
      type(DataSetBracket) :: bracket
      type(ESMF_Time) :: interp_time1, interp_time2
      type(ESMF_Time) :: file_time1, file_time2
      type(ESMF_Time) :: time
      integer :: index1, index2 
      character(len=:), allocatable :: file1, file2
      real :: weights(2)
      logical :: disable_interp, enable, update

      call ESMF_TimeSet(interp_time1,yy=2001, mm=4, dd=14, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(interp_time2,yy=2001, mm=4, dd=15, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(file_time1,yy=2000, mm=4, dd=14, h=21, m=0, s=0, _RC)
      call ESMF_TimeSet(file_time2,yy=2000, mm=4, dd=15, h=21, m=0, s=0, _RC)
      index1 = 1
      index2 = 1
      file1 = "foo.nc4"
      file2 = "foo.nc4"
      enable = .true.
      update = .true.
      node1 = DataSetNode(file1, index1, file_time1, interp_time1, enable, update)
      node2 = DataSetNode(file2, index2, file_time2, interp_time2, enable, update)

      disable_interp = .true.
      call bracket%set_parameters(disable_interp, node1, node2)
      time = interp_time1
      weights = bracket%compute_bracket_weights(time, _RC)
      @assertEqual(weights,[1.0,0.0])

      disable_interp = .false.
      call bracket%set_parameters(disable_interp, node1, node2)
      call ESMF_TimeSet(time,yy=2001, mm=4, dd=15, h=9, m=0, s=0, _RC)
      weights = bracket%compute_bracket_weights(time, _RC)
      @assertEqual(weights,[0.5,0.5])

      disable_interp = .true.
      call bracket%set_parameters(disable_interp, node1, node2)
      weights = bracket%compute_bracket_weights(time, _RC)
      @assertEqual(weights,[1.0,0.0])
      
   end subroutine test_bracket
      

end module Test_ExtDataNodeBracket
