#include "MAPL_TestErr.h"
module Test_OutputInfo
   use mapl3g_output_info
   use mapl3g_ungridded_dim_info
   use pfunit
   use esmf

   implicit none

#include "history3g_test_utility_variables.h"

contains

#include "history3g_test_utility_procedures.h"

   @Test
   subroutine test_construct_output_info()
      type(ESMF_Info) :: info
      type(OutputInfo) :: out_info
      type(UngriddedDimInfo) :: ungrid_info
      character(len=:), allocatable :: stri
      integer :: i
      integer :: status

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS, VLOC, NUM_UNGRIDDED, _RC)
      out_info = OutputInfo(info, _RC)
      @assertEqual(out_info%num_levels, NUM_LEVELS, 'num_levels does not match.')
      @assertEqual(out_info%vloc, VLOC, 'vloc does not match.')
      @assertEqual(out_info%num_ungridded(), NUM_UNGRIDDED, 'num_ungridded does not match.')
      do i=1, out_info%num_ungridded()
         ungrid_info = out_info%ungridded_dims(i)
         write(stri, fmt='(I0)', iostat=status) i
         @assertEqual(0, status, 'Failed to create stri')
         @assertEqual(NAME, ungrid_info%name, 'name does not match, dimesion ' // trim(adjustl(stri)))
         @assertEqual(UNITS, ungrid_info%units, 'units does not match, dimension ' // trim(adjustl(stri)))
         @assertEqual(COORDINATES, ungrid_info%coordinates, 'coordinates do not match, dimension ' // trim(adjustl(stri)))
      end do

      call ESMF_InfoDestroy(info)

   end subroutine test_construct_output_info

   !@Test
   subroutine test_less()
      type(ESMF_Info) :: info
      type(OutputInfo) :: out_info_1, out_info_2
      character(len=:), allocatable :: names(:), units(:)
      integer :: status

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS, VLOC, NUM_UNGRIDDED, _RC)
      out_info_1 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      names = [character(len=2) :: 'A2', 'A3', 'A4' ]
      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS, VLOC, NUM_UNGRIDDED, names=names, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)
      
      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 names are smaller than OutputInfo2 names.')

      units = [character(len=8) :: 'tons', 'volts', 'watts']
      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS, VLOC, NUM_UNGRIDDED, units_array=units, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 units are smaller than OutputInfo2 units.')

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS+1, VLOC, NUM_UNGRIDDED, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 num_levels are smaller than OutputInfo2 num_levels.')

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS, VLOC, NUM_UNGRIDDED+1, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 ungridded are smaller than OutputInfo2 num_ungridded.')

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, NUM_LEVELS, 'VERTICAL_DIM_EDGE', NUM_UNGRIDDED, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 vloc is smaller than OutputInfo2 num_ungridded vloc.')

   end subroutine test_less

end module Test_OutputInfo
