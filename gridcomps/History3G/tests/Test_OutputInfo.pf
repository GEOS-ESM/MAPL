#define SET_RC if(present(rc)) rc = status

#include "MAPL_TestErr.h"
module Test_OutputInfo
   use mapl3g_output_info
   use mapl3g_ungridded_dim_info
   use pfunit
   use esmf
!   use mapl3g_history3g_test_utilities

   implicit none

#include "history3g_test_utility_variables.h"
!   character(len=*), parameter :: PREFIX = 'MAPL/G1/'
!   integer, parameter :: NUM_LEVELS = 3
!   character(len=*), parameter :: VLOC = 'VERTICAL_DIM_CENTER'
!   integer, parameter :: NUM_UNGRIDDED = 3
!   character(len=*), parameter :: NAME = 'A1'
!   character(len=*), parameter :: UNITS = 'stones'
!   real, parameter :: COORDINATES(3) = [2.0, 2.4, 2.5]

contains

#include "history3g_test_utility_procedures.h"

   @Test
   subroutine test_construct_object()
      type(ESMF_Info) :: info
      type(OutputInfo) :: out_info
      type(UngriddedDimInfo) :: ungrid_info
      character(len=:), allocatable :: stri
      integer :: i
      integer :: status

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS, VLOC, NUM_UNGRIDDED, _RC)
      out_info = OutputInfo(info, _RC)
      @assertEqual(out_info%num_levels, NUM_LEVELS, 'num_levels does not match.')
      @assertEqual(out_info%vloc, VLOC, 'vloc does not match.')
      @assertEqual(out_info%num_ungridded(), NUM_UNGRIDDED, 'num_ungridded does not match.')
      do i=1, out_info%num_ungridded()
         ungrid_info = out_info%ungridded_dims(i)
         write(stri, fmt='(I0)', iostat=status) i
         @assertEqual(0, status, 'Failed to create stri')
         @assertEqual(NAME, ungrid_info%name, 'name does not match, dimesion ' // trim(adjustl(stri)))
         @assertEqual(UNITS, ungrid_info%units, 'units does not match, dimension ' // trim(adjustl(stri)))
         @assertEqual(COORDINATES, ungrid_info%coordinates, 'coordinates do not match, dimension ' // trim(adjustl(stri)))
      end do

      call ESMF_InfoDestroy(info)

   end subroutine test_construct_object

   @Test
   subroutine test_less()
      type(ESMF_Info) :: info
      type(OutputInfo) :: out_info_1, out_info_2
      character(len=:), allocatable :: names(:), units(:)
      integer :: status

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS, VLOC, NUM_UNGRIDDED, _RC)
      out_info_1 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      names = [character(len=2) :: 'A2', 'A3', 'A4' ]
      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS, VLOC, NUM_UNGRIDDED, names=names, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)
      
      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 names are smaller than OutputInfo2 names.')

      units = [character(len=8) :: 'tons', 'volts', 'watts']
      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS, VLOC, NUM_UNGRIDDED, units_array=units, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 units are smaller than OutputInfo2 units.')

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS+1, VLOC, NUM_UNGRIDDED, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 num_levels are smaller than OutputInfo2 num_levels.')

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS, VLOC, NUM_UNGRIDDED+1, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 ungridded are smaller than OutputInfo2 num_ungridded.')

      info = ESMF_InfoCreate(_RC)
      call make_esmf_info(info, PREFIX, NUM_LEVELS, 'VERTICAL_DIM_EDGE', NUM_UNGRIDDED, _RC)
      out_info_2 = OutputInfo(info, _RC)
      call ESMF_InfoDestroy(info)

      @assertTrue(out_info_1 < out_info_2, 'OutputInfo 1 vloc is smaller than OutputInfo2 num_ungridded vloc.')

   end subroutine test_less

!   subroutine make_esmf_info(info, prefix, num_levels, vloc, num_ungridded, names, units_array, rc)
!      type(ESMF_Info), intent(inout) :: info
!      character(len=*), intent(in) :: prefix
!      integer, intent(in) :: num_levels
!      character(len=*), intent(in) :: vloc
!      integer, intent(in) :: num_ungridded
!      character(len=*), optional, intent(in) :: names(:)
!      character(len=*), optional, intent(in) :: units_array(:)
!      integer, optional, intent(out) :: rc
!      character(len=*), parameter :: NUMLEV_LABEL = 'num_levels'
!      character(len=*), parameter :: VLOC_LABEL = 'vloc'
!      character, parameter :: NUM_UNGRID_LABEL = 'num_ungridded'
!      integer :: status
!
!      call ESMF_InfoSet(info, prefix // NUMLEV_LABEL, num_levels, _RC)
!      call ESMF_InfoSet(info, prefix // VLOC_LABEL, vloc, _RC)
!      call make_esmf_ungridded_info(info, prefix, num_ungridded, names, units_array, _RC)
!
!      SET_RC
!
!   end subroutine make_esmf_info
!
!   subroutine make_esmf_ungridded_info(info, prefix, num_ungridded, names, units_array, rc)
!      type(ESMF_Info), intent(inout) :: info
!      character(len=*), intent(in) :: prefix
!      integer, intent(in) :: num_ungridded
!      character(len=*), optional, intent(in) :: names(:)
!      character(len=*), optional, intent(in) :: units_array(:)
!      integer, optional, intent(out) :: rc
!      character(len=*), parameter :: NAME_LABEL = 'name'
!      character(len=*), parameter :: UNITS_LABEL = 'units'
!      character(len=*), parameter :: COORDINATES_LABEL = 'coordinates'
!      real, parameter :: COORDINATES(3) = [2.0, 2.4, 2.5]
!      type(ESMF_Info) :: comp_info
!      character(len=:), allocatable :: name_, units_
!      integer :: status, i
!
!      status = -1
!
!      SET_RC
!
!      if(present(names)) then
!         if(size(names) /= num_ungridded) return
!      end if
!
!      if(present(units_array)) then
!         if(size(units_array) /= num_ungridded) return
!      end if
!
!      do i=1, num_ungridded
!         name_ = NAME
!         if(present(names)) name_ = names(i)
!         units_ = UNITS
!         if(present(units_array)) units_ = units_array(i)
!         comp_info = ESMF_InfoCreate(_RC)
!         call ESMF_InfoSet(comp_info, prefix // NAME_LABEL, name_, _RC)
!         call ESMF_InfoSet(comp_info, prefix // UNITS_LABEL, units_, _RC)
!         call ESMF_InfoSet(comp_info, prefix // COORDINATES_LABEL, COORDINATES, _RC)
!         call ESMF_InfoSet(info, prefix // make_component_label(i), comp_info, _RC)
!         call ESMF_InfoDestroy(comp_info)
!      end do
!
!      SET_RC
!
!   end subroutine make_esmf_ungridded_info
!   
!   function make_component_label(n, rc) result(name)
!      character(len=:), allocatable :: name
!      integer, intent(in) :: n
!      integer, optional, intent(out) :: rc
!      character(len=*), parameter :: COMP_PREFIX = 'dim_'
!      character(len=32) :: strn
!      integer :: status
!
!      write(strn, fmt='(I0)', iostat=status) n
!      if(status == 0) name = COMP_PREFIX // trim(adjustl(strn))
!
!      SET_RC
!
!   end function make_component_label

end module Test_OutputInfo
