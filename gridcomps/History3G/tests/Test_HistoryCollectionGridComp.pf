#include "MAPL_TestErr.h"
module Test_HistoryCollectionGridComp

   use pfunit
   use mapl3g_HistoryCollectionGridComp_private
   use esmf
   implicit none

contains

   @Test
   subroutine test_make_geom()
      type(ESMF_HConfig) :: hconfig
      type(ESMF_Geom) :: geom
      type(ESMF_Grid) :: grid
      integer :: rank
      integer :: status

      hconfig = ESMF_HConfigCreate(content= &
         "{geom: {class: latlon, im_world: 12, jm_world: 13, pole: PC, " // &
         "dateline: DC, nx: 1, ny: 1}}", _RC)
      geom = make_geom(hconfig, _RC)
      call ESMF_GeomGet(geom, grid=grid, rank=rank, _RC)
      @assert_that(rank, is(2))

      call ESMF_HConfigDestroy(hconfig, _RC)
      call ESMF_GridDestroy(grid, nogarbage=.true., _RC)
      call ESMF_GeomDestroy(geom, _RC)

   end subroutine test_make_geom

   @Test
   subroutine test_create_output_bundle()
      type(ESMF_HConfig) :: hconfig_geom, hconfig_hist
      type(ESMF_Geom) :: geom
      type(ESMF_Grid) :: grid
      integer :: rank,fieldCount
      integer :: status
      logical :: found
      type(ESMF_State) :: state, substate
      type(ESMF_FieldBundle) :: bundle
      type(ESMF_Field) :: field

      hconfig_geom = ESMF_HConfigCreate(content= &
         "{geom: {class: latlon, im_world: 14, jm_world: 13, pole: PC, " // &
         "dateline: DC, nx: 1, ny: 1}}", _RC)
      geom = make_geom(hconfig_geom, _RC)
      call ESMF_GeomGet(geom, grid=grid, _RC)

      field = ESMF_FieldCreate(grid, ESMF_TYPEKIND_R4, name="E_1", _RC)
      substate = ESMF_StateCreate(fieldList=[field], name= "DYN", _RC)
      state = ESMF_Statecreate(nestedStateList=[substate],_RC)

      hconfig_hist = ESMF_HConfigCreate(content= &
         "{var_list: {E1: {expr: DYN.E_1}}}", _RC)
 
      bundle = create_output_bundle(hconfig_hist, state, _RC)
      call ESMF_FieldBundleGet(bundle, fieldCount=fieldCount, _RC)
      @assert_that(fieldCount, is(1))
      call ESMF_FieldBundleGet(bundle, "E1", isPresent=found, _RC)
      @assert_that(found, is(true()))
      
      call ESMF_HConfigDestroy(hconfig_geom, _RC)
      call ESMF_HConfigDestroy(hconfig_hist, _RC)

      call ESMF_FieldBundleGet(bundle, "E1", field=field, _RC)
      call ESMF_FieldDestroy(field, nogarbage=.true., _RC)
      call ESMF_FieldBundleDestroy(bundle, nogarbage=.true. ,_RC)

      call ESMF_StateGet(state, "DYN/E_1", field, _RC)
      call ESMF_FieldDestroy(field, nogarbage=.true., _RC)
      call ESMF_StateDestroy(state, nogarbage=.true., _RC)

      call ESMF_GridDestroy(grid, nogarbage=.true., _RC)
      call ESMF_GeomDestroy(geom, _RC)


   end subroutine test_create_output_bundle

   @Test
   subroutine test_set_start_stop_time()
      type(ESMF_HConfig) :: hconfig
      type(ESMF_Time) :: time,start_stop_time(2)
      integer :: status
      type(ESMF_Time) :: start_time, stop_time
      type(ESMF_TimeInterval) :: dt
      type(ESMF_Clock) :: clock

      call ESMF_TimeIntervalSet(dt, h=1, _RC)
      call ESMF_TimeSet(start_time, timeString="2000-04-03T21:00:00", _RC)
      call ESMF_TimeSet(stop_time, timeString="2000-04-22T21:00:00", _RC)
      clock = ESMF_ClockCreate(timeStep=dt, startTime=start_time, stopTime=stop_time, _RC)

      hconfig = ESMF_HConfigCreate(content = &
        "{time_spec: {frequency: PT3H}}", _RC)

      start_stop_time = set_start_stop_time(clock, hconfig, _RC)
      @assert_that(start_time == start_stop_time(1), is(true()))
      @assert_that(stop_time == start_stop_time(2), is(true()))
 
      hconfig = ESMF_HConfigCreate(content = &
        "{time_spec: {start: 2000-04-14T21:00:00, stop: 2000-04-15T21:00:00}}", _RC)
      call ESMF_TimeSet(start_time, timeString="2000-04-14T21:00:00", _RC)
      call ESMF_TimeSet(stop_time, timeString="2000-04-15T21:00:00", _RC)

      start_stop_time = set_start_stop_time(clock, hconfig, _RC)
      @assert_that(start_time == start_stop_time(1), is(true()))
      @assert_that(stop_time == start_stop_time(2), is(true()))

   end subroutine test_set_start_stop_time

   @Test
   subroutine test_create_output_alarm()
      type(ESMF_HConfig) :: hconfig
      type(ESMF_Time) :: time,start_stop_time(2)
      integer :: status
      type(ESMF_Time) :: start_time, stop_time
      type(ESMF_TimeInterval) :: dt
      type(ESMF_Clock) :: clock
      type(ESMF_Alarm) :: alarm
      logical :: is_ringing
      type(ESMF_Time) currTime

      call ESMF_TimeIntervalSet(dt, h=1, _RC)
      call ESMF_TimeSet(start_time, timeString="2000-04-03T21:00:00", _RC)
      call ESMF_TimeSet(stop_time, timeString="2000-04-22T21:00:00", _RC)
      clock = ESMF_ClockCreate(timeStep=dt, startTime=start_time, stopTime=stop_time, _RC)
      hconfig = ESMF_HConfigCreate(content = &
        "{time_spec: {frequency: PT3H}}", _RC)

      alarm = create_output_alarm(clock, hconfig, _RC)
     
      call ESMF_ClockAdvance(clock, _RC)
      is_ringing = ESMF_AlarmIsRinging(alarm, _RC) 
      @assert_that(is_ringing, is(false()))

      call ESMF_ClockAdvance(clock, _RC)
      is_ringing = ESMF_AlarmIsRinging(alarm, _RC) 
      @assert_that(is_ringing, is(false()))

      call ESMF_ClockAdvance(clock, _RC) 
      is_ringing = ESMF_AlarmIsRinging(alarm, _RC) 
      @assert_that(is_ringing, is(true()))
 
   end subroutine test_create_output_alarm

end module Test_HistoryCollectionGridComp
