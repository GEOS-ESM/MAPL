#include "MAPL_Generic.h"
#if defined(I_AM_PFUNIT)
#  undef I_AM_PFUNIT
#endif
#define I_AM_PFUNIT

module Test_ExtDataUpdatePointer
   use MAPL_ExtDataPointerUpdate
   use funit
   use esmf
   use MAPL_ExceptionHandling
   implicit none


   integer, parameter :: TIME_STEP_IN_SECONDS = 500
   character(len=*), parameter :: START_TIME_STRING = '2024-12-31T12:30:00'
   integer, parameter :: YY=2024, MM=12, DD=31, H=12, M=30, S=0
   character(len=*), parameter :: TIME_STRING = '2024-12-31T12:40:00'
   character(len=*), parameter :: UPDATE_TIME = 'T20:00:00'
   character(len=*), parameter :: UPDATE_FREQ = '-'
   character(len=*), parameter :: DEFAULT_UPDATE_OFFSET = 'PT300S'
   type(ESMF_Time) :: start_time
   type(ESMF_TimeInterval) :: timestep
   type(ESMF_Time) :: time
   type(ESMF_Clock) :: clock
   integer, parameter :: SUCCESS = 0

contains

   @Test
   subroutine test_get_adjusted_time_without_time_argument()
      type(ExtDataPointerUpdate) :: ex
      integer :: status, rc
      type(ESMF_Time) :: adjusted_time
      type(ESMF_Time) :: expected_time

      call ex%create_from_parameters(UPDATE_TIME, UPDATE_FREQ, DEFAULT_UPDATE_OFFSET, time, clock, _RC)
      adjusted_time = ex%get_adjusted_time()
      @assertTrue(.TRUE.)

   end subroutine test_get_adjusted_time_without_time_argument

   @Test
   subroutine test_get_adjusted_time_with_time_argument()
!      type(ExtDataPointerUpdate) :: ex

      @assertTrue(.TRUE.)

   end subroutine test_get_adjusted_time_with_time_argument

   @Before
   subroutine set_up()
      integer :: status, rc

      status = SUCCESS
      call ESMF_Initialize(defaultCalKind=ESMF_CALKIND_GREGORIAN, _RC)
!      call ESMF_TimeSet(start_time, timeString=START_TIME_STRING, _RC)
      call ESMF_TimeSet(start_time, yy=YY, _RC)
      call ESMF_TimeSet(start_time, mm=MM, _RC)
      call ESMF_TimeSet(start_time, dd=DD, _RC)
      call ESMF_TimeSet(start_time, h=H, _RC)
      call ESMF_TimeSet(start_time, m=M, _RC)
      call ESMF_TimeSet(start_time, s=S, _RC)
      clock = ESMF_ClockCreate(timestep=timestep, startTime=start_time, _RC)
      call ESMF_TimeSet(time, timeString=TIME_STRING, _RC)
      
   end subroutine set_up

   @After
   subroutine tear_down()
      integer :: status, rc

      call ESMF_ClockDestroy(clock, _RC)
      call ESMF_Finalize(_RC)

   end subroutine tear_down

end module Test_ExtDataUpdatePointer
