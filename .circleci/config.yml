version: 2.1

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

# Anchors to prevent forgetting to update a version
os_version: &os_version ubuntu20
baselibs_version: &baselibs_version v7.25.0
bcs_version: &bcs_version v11.6.0
tag_build_arg_name: &tag_build_arg_name maplversion

orbs:
  ci: geos-esm/circleci-tools@dev:7a293ebb2b990390aa4559ce69af7682bfca2cc1

workflows:
  build-and-test-MAPL:
    jobs:
      # Builds MAPL in a "default" way
      - ci/build:
          name: build-and-test-MAPL-on-<< matrix.compiler >>-using-<< matrix.cmake_generator >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
              cmake_generator: ['Unix Makefiles','Ninja']
          baselibs_version: *baselibs_version
          repo: MAPL
          mepodevelop: false
          run_unit_tests: true
          ctest_options: "-L 'ESSENTIAL' --output-on-failure"
          persist_workspace: true # Needed for MAPL tutorials

      # Builds MAPL like UFS does (no FLAP and pFlogger, static)
      - ci/build:
          name: build-UFS-MAPL-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          baselibs_version: *baselibs_version
          repo: MAPL
          mepodevelop: false
          remove_flap: true
          remove_pflogger: true
          extra_cmake_options: "-DBUILD_WITH_FLAP=OFF -DBUILD_WITH_PFLOGGER=OFF -DBUILD_WITH_FARGPARSE=OFF -DUSE_EXTDATA2G=OFF -DBUILD_SHARED_MAPL=OFF"
          run_unit_tests: true
          # ExtData1G tests were removed from ESSENTIAL, so we run them separately here as UFS might still use 1G?
          ctest_options: "-L 'ESSENTIAL|EXTDATA1G_SMALL_TESTS' --output-on-failure"

      # Run MAPL Tutorials
      - ci/run_mapl_tutorial:
          name: run-<< matrix.tutorial_name >>-Tutorial-with-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
              tutorial_name:
                - hello_world
                - parent_no_children
                - parent_one_child_import_via_extdata
                - parent_one_child_no_imports
                - parent_two_siblings_connect_import_export
          # We will only run the tutorials with GNU make. No need to double up
          # as Ninja is a build test only
          requires:
            - build-and-test-MAPL-on-<< matrix.compiler >>-using-Unix Makefiles
          baselibs_version: *baselibs_version

  build-and-run-GEOSgcm:
    jobs:
      # Build GEOSgcm
      - ci/build:
          name: build-GEOSgcm-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          baselibs_version: *baselibs_version
          repo: GEOSgcm
          checkout_fixture: true
          mepodevelop: true
          checkout_mapl_branch: true
          persist_workspace: true # Needs to be true to run fv3/gcm experiment, costs extra, retained for one day

      # Run GCM (1 hour, no ExtData)
      - ci/run_gcm:
          name: run-GCM-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          requires:
            - build-GEOSgcm-on-<< matrix.compiler >>
          repo: GEOSgcm
          baselibs_version: *baselibs_version
          bcs_version: *bcs_version

      # Run Coupled GCM (1 hour, no ExtData)
      - ci/run_gcm:
          name: run-coupled-GCM-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          requires:
            - build-GEOSgcm-on-<< matrix.compiler >>
          repo: GEOSgcm
          baselibs_version: *baselibs_version
          bcs_version: *bcs_version
          gcm_ocean_type: MOM6
          change_layout: false

  build-GEOSldas:
    jobs:
      # Build GEOSldas
      - ci/build:
          name: build-GEOSldas-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          baselibs_version: *baselibs_version
          repo: GEOSldas
          mepodevelop: false
          checkout_fixture: true
          fixture_branch: develop
          checkout_mapl_branch: true

  build-GEOSadas:
    jobs:
      # Build GEOSadas (ifort only, needs a couple develop branches)
      - ci/build:
          name: build-GEOSadas-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [ifort]
          resource_class: xlarge
          baselibs_version: *baselibs_version
          repo: GEOSadas
          checkout_fixture: true
          fixture_branch: feature/mathomp4/mapldevelop
          checkout_mapl_branch: true
          mepodevelop: false
          rebuild_procs: 1

  build-and-publish-docker:
    when:
      equal: [ "release", << pipeline.parameters.GHA_Event >> ]
    jobs:
      - ci/publish_docker:
          filters:
            tags:
              only: /^v.*$/
          name: publish-ifort-docker-image
          context:
            - docker-hub-creds
            - ghcr-creds
          os_version: *os_version
          baselibs_version: *baselibs_version
          container_name: mapl
          mpi_name: intelmpi
          mpi_version: "2021.13"
          compiler_name: ifort
          compiler_version: "2021.13"
          image_name: geos-env
          tag_build_arg_name: *tag_build_arg_name
      #- ci/publish_docker:
          #filters:
            #tags:
              #only: /^v.*$/
          #name: publish-ifx-docker-image
          #context:
            #- docker-hub-creds
            #- ghcr-creds
          #os_version: *os_version
          #baselibs_version: *baselibs_version
          #container_name: mapl
          #mpi_name: intelmpi
          #mpi_version: "2021.13"
          #compiler_name: ifx
          #compiler_version: "2024.2"
          #image_name: geos-env
          #tag_build_arg_name: *tag_build_arg_name
      - ci/publish_docker:
          filters:
            tags:
              only: /^v.*$/
          name: publish-gcc-docker-image
          context:
            - docker-hub-creds
            - ghcr-creds
          os_version: *os_version
          baselibs_version: *baselibs_version
          container_name: mapl
          mpi_name: openmpi
          mpi_version: 5.0.2
          compiler_name: gcc
          compiler_version: 13.2.0
          image_name: geos-env-mkl
          tag_build_arg_name: *tag_build_arg_name
