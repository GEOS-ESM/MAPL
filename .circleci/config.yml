version: 2.1

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

# Anchors to prevent forgetting to update a version
os_version: &os_version ubuntu20
baselibs_version: &baselibs_version v7.7.0
bcs_version: &bcs_version v11.00.0
tag_build_arg_name: &tag_build_arg_name maplversion

orbs:
  ci: geos-esm/circleci-tools@1

workflows:
  build-and-test:
    jobs:

      # Builds MAPL in a "default" way - Intel
      - ci/build:
          name: build-and-test-MAPL-on-<< matrix.compiler >>-using-<< matrix.cmake_generator >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [ifort]
              #cmake_generator: ['Unix Makefiles', 'Ninja']
              cmake_generator: ['Unix Makefiles']
          baselibs_version: *baselibs_version
          repo: MAPL
          mepodevelop: false
          run_unit_tests: true
          ctest_options: "-LE 'PERFORMANCE|EXTDATA1G_BIG_TESTS|EXTDATA2G_BIG_TESTS' --output-on-failure"
          persist_workspace: true # Needed for MAPL tutorials

      # Builds MAPL in a "default" way - GNU
      #
      # NOTE: Currently Open MPI fails on the bundleio with:
      #
      #   The OSC pt2pt component does not support MPI_THREAD_MULTIPLE in this release.
      #   Workarounds are to run on a single node, or to use a system with an RDMA
      #   capable network such as Infiniband.
      #
      # For now, we run GNU/Open MPI without the bundleio tests. Some indications that
      # Open MPI 5 will not have this limitation

      - ci/build:
          name: build-and-test-MAPL-on-<< matrix.compiler >>-using-<< matrix.cmake_generator >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran]
              #cmake_generator: ['Unix Makefiles', 'Ninja']
              cmake_generator: ['Unix Makefiles']
          baselibs_version: *baselibs_version
          repo: MAPL
          mepodevelop: false
          run_unit_tests: true
          ctest_options: "-E bundleio -LE 'PERFORMANCE|EXTDATA1G_BIG_TESTS|EXTDATA2G_BIG_TESTS' --output-on-failure"
          persist_workspace: true # Needed for MAPL tutorials

      # Builds MAPL like UFS does (no FLAP and pFlogger, static)
      - ci/build:
          name: build-UFS-MAPL-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [ifort]
          baselibs_version: *baselibs_version
          repo: MAPL
          mepodevelop: false
          extra_cmake_options: "-DBUILD_WITH_FLAP=OFF -DBUILD_WITH_PFLOGGER=OFF -DBUILD_WITH_FARGPARSE=OFF -DUSE_EXTDATA2G=OFF -DBUILD_SHARED_MAPL=OFF"
          run_unit_tests: true
          ctest_options: "-LE 'PERFORMANCE|EXTDATA1G_BIG_TESTS|EXTDATA2G_BIG_TESTS' --output-on-failure"

      # Build GEOSgcm -- ifort
      - ci/build:
          name: build-GEOSgcm-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [ifort]
          baselibs_version: *baselibs_version
          repo: GEOSgcm
          checkout_fixture: true
          fixture_branch: R21C
          mepodevelop: false
          checkout_mapl_branch: true
          persist_workspace: true # Needs to be true to run fv3/gcm experiment, costs extra, retained for one day

      # Build GEOSgcm -- GCC -- only to main
      - ci/build:
          filters:
            branches:
              only:
                - main
          name: build-GEOSgcm-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran]
          baselibs_version: *baselibs_version
          repo: GEOSgcm
          checkout_fixture: true
          fixture_branch: R21C
          mepodevelop: false
          checkout_mapl_branch: true
          persist_workspace: true # Needs to be true to run fv3/gcm experiment, costs extra, retained for one day

      # Build GEOSadas (ifort only, needs a couple develop branches) -- only to main
      - ci/build:
          filters:
            branches:
              only:
                - main
          name: build-GEOSadas-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [ifort]
          resource_class: xlarge
          baselibs_version: *baselibs_version
          repo: GEOSadas
          checkout_fixture: true
          fixture_branch: R21C
          checkout_mapl_branch: true
          mepodevelop: false
          rebuild_procs: 1

      # Run GCM (1 hour, no ExtData) -- only to main
      - ci/run_gcm:
          filters:
            branches:
              only:
                - main
          name: run-GCM-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          requires:
            - build-GEOSgcm-on-<< matrix.compiler >>
          repo: GEOSgcm
          baselibs_version: *baselibs_version
          bcs_version: *bcs_version

      # Run Coupled GCM (1 hour, no ExtData) -- only to main
      - ci/run_gcm:
          filters:
            branches:
              only:
                - main
          name: run-coupled-GCM-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
          matrix:
            parameters:
              compiler: [ifort]
          requires:
            - build-GEOSgcm-on-<< matrix.compiler >>
          repo: GEOSgcm
          baselibs_version: *baselibs_version
          bcs_version: *bcs_version
          gcm_ocean_type: MOM6
          change_layout: false
