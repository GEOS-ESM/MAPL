#if defined XML_PATH
#undef XML_PATH
#endif

! This needs to be set to a path to the xml unit database for testing.
!#define XML_PATH 

module Test_udunits2

   use funit
   use udunits2mod
   ! The instances from iso_c_binding are not explicitly included in an include
   ! statement, to verify that the use statement for the module being tested
   ! is correct.
   use, intrinsic :: iso_c_binding, only: c_ptr, c_null_ptr

   implicit none

   integer(ut_encoding) :: encoding = UT_ASCII
   type(c_ptr) :: ut_system_ptr, unit1, unit2
   character(len=*), parameter :: KM = 'km'
   character(len=*), parameter :: M = 'm'
   character(len=*), parameter :: S = 's'

contains

   @Before
   subroutine set_up()

      encoding = UT_ASCII
      SYSTEM_INSTANCE = c_null_ptr
      call all_c_null_ptr(ut_system_ptr, unit1, unit2)

   end subroutine set_up

   @After
   subroutine tear_down()

      encoding = UT_ASCII
      @assertTrue(destroy_all(), 'System destroy failed.')

      if .not. is_null(ut_system_ptr) call ut_free_system(ut_system_ptr)
      if .not. is_null(unit1) call ut_free(unit1)
      if .not. is_null(unit2) call ut_free(unit2)

   end subroutine tear_down

   @Test
   subroutine test_initialize()
      type(c_ptr) :: ptr

      ptr = initialize()
      @assertEqual(ptr, c_null_ptr, 'initialize returned the C null pointer.')

   end subroutine test_initialize
   
#if defined XML_PATH

   @Test
   subroutine test_initialize_noencoding()
      type(c_ptr) :: ptr

      ptr = initialize(XML_PATH)
      @assertEqual(ptr, c_null_ptr, 'initialize returned the C null pointer.')

   end subroutine test_initialize_noencoding()

#endif

   @Test
   subroutine test_get_converter()
      type(MAPL_Udunits_Converter) :: conv

      conv = get_converter(KM, M, encoding=encoding)
      @assertFalse(conv % ptr == c_null_ptr, 'get_converter returned the C null pointer.')

   end subroutine test_get_converter

   @Test
   subroutine test_get_converter_noencoding()
      type(MAPL_Udunits_Converter) :: conv

      conv = get_converter(KM, M)
      @assertFalse(conv % ptr == c_null_ptr, 'get_converter returned the C null pointer.')

   end subroutine test_get_converter_noencoding

   @Test
   subroutine test_get_ut_system()
      type(c_ptr) :: ptr
      logical :: destroyed

      ptr = get_ut_system()
      @assertEqual(ptr, c_null_ptr, 'get_ut_system returned the C null pointer.')
      destroyed = ut_free_system(ptr)

   end subroutine test_get_ut_system

#if defined XML_PATH

   @Test
   subroutine test_get_ut_system_nopath()
      type(c_ptr) :: ptr
      logical :: destroyed

      ptr = get_ut_system(XML_PATH)
      @assertEqual(ptr, c_null_ptr, 'get_ut_system returned the C null pointer.')
      destroyed = ut_free_system(ptr)

#endif

   @Test
   subroutine test_are_convertible()
      type(c_ptr) :: unit1, unit2, ut_system_ptr
      
      ut_system_ptr = ut_read_xml(c_null_ptr)
      unit1 = ut_parse(ut_system_ptr, 'km')
      unit2 = ut_parse(ut_system_ptr, 'm')
      @assertTrue(are_convertible(unit1, unit2), 'Units are convertible.')

   end subroutine test_are_convertible

   @Test
   subroutine test_are_not_convertible()
      type(c_ptr) :: unit1, unit2, ut_system_ptr

      ut_system_ptr = ut_read_xml(c_null_ptr)
      unit1 = ut_parse(ut_system_ptr, 'km')
      unit2 = ut_parse(ut_system_ptr, 's')
      @assertFalse(are_convertible(unit1, unit2), 'Units are not convertible.')

   end subroutine test_are_not_convertible

   @Test
   subroutine test_ut_read_xml()
      type(c_ptr) :: path = c_null_ptr
      integer(ut_status) :: ustat
      
      utsys = ut_read_xml(path)
      ustat = ut_get_status()
      @assertEqual(ustat, UT_SUCCESS, 'Failed to get ut_system')
      call ut_free_system(utsys)

   end subroutine test_ut_read_xml

   @Test
   subroutine test_ut_parse()
      type(ut_system) :: utsys
      character(c_char), parameter :: string = 'kilogram'
      integer(ut_encoding) :: encoding
      type(c_ptr) :: path = c_null_ptr
      type(ut_unit) :: unit0
      integer(ut_status) :: ustat

      utsys = ut_read_xml(path)
      unit0 = ut_parse(utsys, string, encoding)
      ustat = ut_get_status()
      @assertEqual(ustat, UT_SUCCESS, 'Unsuccessful')
      
   end subroutine test_ut_parse

   @Test
   subroutine test_convert_double()
      real(c_double), parameter :: FROM = 1.0
      real(c_double), parameter :: EXPECTED = 1000.0
      real(c_double) :: ACTUAL
      type(MAPL_Udunits_Converter) :: conv
      character(len=*), parameter :: FROM_STRING = KM
      character(len=*), parameter :: TO_STRING = M

      conv = get_converter(FROM_STRING, TO_STRING)
      ACTUAL = conv % convert_double(FROM)
      @assertEqual(ACTUAL, EXPECTED, 'Actual does not equal expected.')

   end subroutine test_convert_double

   @Test
   subroutine test_convert_float()
      real(c_float), parameter :: FROM = 1.0
      real(c_float), parameter :: EXPECTED = 1000.0
      real(c_float) :: ACTUAL
      type(MAPL_Udunits_Converter) :: conv
      character(len=*), parameter :: FROM_STRING = KM
      character(len=*), parameter :: TO_STRING = M

      conv = get_converter(FROM_STRING, TO_STRING)
      ACTUAL = conv % convert_float(FROM)
      @assertEqual(ACTUAL, EXPECTED, 'Actual does not equal expected.')

   end subroutine test_convert_float

   @Test
   subroutine test_convert_doubles()
      real(c_double), parameter :: FROM(:) = [1.0, 2.0, 3.0]
      real(c_double), parameter :: EXPECTED(:) = 1000.0 * FROM
      real(c_double) :: ACTUAL(size(EXPECTED))
      type(MAPL_Udunits_Converter) :: conv
      character(len=*), parameter :: FROM_STRING = KM
      character(len=*), parameter :: TO_STRING = M

      conv = get_converter(FROM_STRING, TO_STRING)
      call conv % convert_doubles(FROM, ACTUAL)
      @assertEqual(ACTUAL, EXPECTED, 'Actual does not equal expected.')

   end subroutine test_convert_doubles

   @Test
   subroutine test_convert_floats()
      real(c_float), parameter :: FROM(:) = [1.0, 2.0, 3.0]
      real(c_float), parameter :: EXPECTED(:) = 1000.0 * FROM
      real(c_float) :: ACTUAL(size(EXPECTED))
      type(MAPL_Udunits_Converter) :: conv
      character(len=*), parameter :: FROM_STRING = KM
      character(len=*), parameter :: TO_STRING = M

      conv = get_converter(FROM_STRING, TO_STRING)
      call conv % convert_floats(FROM, ACTUAL)
      @assertEqual(ACTUAL, EXPECTED, 'Actual does not equal expected.')

   end subroutine test_convert_floats

   @Test
   subroutine test_destroy_all()
      @assertTrue(.FALSE., 'Test not implemented')
   end subroutine test_destroy_all

   @Test
   subroutine test_destroy_system()
      @assertTrue(.FALSE., 'Test not implemented')
   end subroutine test_destroy_system

   @Test
   subroutine test_destroy_converter()
      @assertTrue(.FALSE., 'Test not implemented')
   end subroutine test_destroy_converter

   @Test
   subroutine test_destroy_ut_unit()
      @assertTrue(.FALSE., 'Test not implemented')
   end subroutine test_destroy_ut_unit

   subroutine all_c_null_ptr(ptr)
      type(c_ptr), intent(inout) :: ptr(:)
      integer :: i

      do i = 1, size(ptrs)
         ptr(i) = c_null_ptr
      end do

   end subroutine all_c_null_ptr

   logical function is_null(cptr)
      type(c_ptr), intent(in) :: cptr

      is_null = (cptr == c_null_ptr)

   end function is_null

end module Test_udunits2
