!define f = constructor f = FieldCondensedArrayDims
#define TEST_ARGS_(E, M) @assertEqual(E, f%arguments(), 'f%arguments() does not match ' // M // '.')
#define EXPECT_(A) [X, Y, Z, A]
#define EXPECT3_ EXPECT_([integer::])
#define EXPECT2A_(A) [X, Y, A]
#define EXPECT2_ [X, Y]

module Test_FieldCondensedArrayDims

   use mapl3g_FieldCondensedArrayDims
   use pfunit

   implicit none

   integer, parameter :: X = 1
   integer, parameter :: Y = X+1
   integer, parameter :: Z = Y+1
   integer, parameter :: W(2) = [Z+1, Z+2]
   integer, parameter :: W1(1) = [W(1)]
   type(FieldCondensedArrayDims) :: f
   integer, allocatable :: expected_args(:)
   character(len=*), parameter :: ERROR_CONSTRUCTOR = 'f%arguments() does not match '

contains

   @Test
   subroutine test_construct()

      f = FieldCondensedArrayDims(X, Y, Z, W)
      expected_args = [X, Y, Z, W]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected(5)')

      f = FieldCondensedArrayDims(X, Y, Z, W1)
      expected_args = [X, Y, Z, W1]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected(4)')
      
   end subroutine test_construct

   @Test
   subroutine test_construct_noungridded()

      f = FieldCondensedArrayDims(X, Y, Z)
      expected_args = [X, Y, Z]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected')

   end subroutine test_construct_noungridded

   @Test
   subroutine test_construct_noz()

      f = FieldCondensedArrayDims(X, Y, W)
      expected_args = [X, Y, 0, W]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected')

   end subroutine test_construct_noz

   @Test
   subroutine test_construct_noz_noungridded()

      f = FieldCondensedArrayDims(X, Y)
      expected_args = [X, Y, 0]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected')

   end subroutine test_construct_noz_noungridded

   @Test
   subroutine test_construct_dimcount0()

      f = FieldCondensedArrayDims(W)
      expected_args = W
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected')

   end subroutine test_construct_dimcount0

   @Test
   subroutine test_construct_vert()

      f = FieldCondensedArrayDims(Z, W)
      expected_args = [Z, W]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected')

   end subroutine test_construct_vert
   
   @Test
   subroutine test_construct_vert_noungridded()

      f = FieldCondensedArrayDims(Z)
      expected_args = [Z]
      @assertEqual(expected_args, f%arguments(), ERROR_CONSTRUCTOR // 'expected')

   end subroutine test_construct_vert_noungridded

   @Test
   subroutine test_horizontal()
   end subroutine test_horizontal
   
   @Test
   subroutine test_vertical()
   end subroutine test_vertical
   
   @Test
   subroutine test_ungridded()
   end subroutine test_ungridded
   
   @Test
   subroutine test_dims()
   end subroutine test_dims
   
   @Before
   subroutine setup()
      if(allocated(expected_args)) deallocate(expected_args)
      call f%initialize()
   end subroutine setup

   @After
   subroutine teardown()
      if(allocated(expected_args)) deallocate(expected_args)
      call f%reset()
   end subroutine teardown

end module Test_FieldCondensedArrayDims
