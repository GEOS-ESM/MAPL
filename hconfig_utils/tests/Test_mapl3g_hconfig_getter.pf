module Test_mapl3g_hconfig_getter
   use mapl3g_hconfig_getter
   use ESMF
   use pfunit
   implicit none

   ! error message stubs
   character(len=*), parameter :: ERROR_NONZERO = 'Non-zero status'
   character, parameter :: SPACE = ' '

   character(len=*), parameter :: label_expected = 'igneous'

   ! instance variables
   logical :: hconfig_is_created = .FALSE.
   type(ESMF_HConfig) :: hconfig

contains

   @Test
   subroutine test_construct_hconfig_getter()
      type(HConfigGetter) :: instance
      logical :: found

      found = .FALSE.
      instance = HConfigGetter(hconfig, label_expected, found)
      @assertEqual(instance%label, label_expected, 'Label mismatch')
      @assertFalse(instance%found, 'found should be .FALSE.')
      @assertEqual(0, len(instance%typestring), 'typestring should be empty.')
      @assertEqual(0, len(instance%valuestring), 'valuestring should be empty.')

      found = .TRUE.
      instance = HConfigGetter(hconfig, label_expected, found)
      @assertEqual(instance%label, label_expected, 'Label mismatch')
      @assertTrue(instance%found, 'found should be .TRUE.')
      @assertEqual(0, len(instance%typestring), 'typestring should be empty.')
      @assertEqual(0, len(instance%valuestring), 'valuestring should be empty.')

   end subroutine test_construct_hconfig_getter
      
   @Test
   subroutine test_get_value()
      type(HConfigGetter) :: getter
      integer(ESMF_KIND_I4), parameter :: DEFAULT = 13
      ! The value in ESMF_HConfig will be HCONFIG_VALUE once it is set.
      ! HCONFIG_VALUE cannot equal DEFAULT because of its initialization.
      integer(ESMF_KIND_I4), parameter :: HCONFIG_VALUE = DEFAULT-1
      ! Therefore, value cannot equal both DEFAULT and HCONFIG_VALUE.
      integer(ESMF_KIND_I4) :: value
      character(len=:), allocatable :: label
      integer :: status
      logical :: found = .FALSE.

      label = label_expected
      ! first call to get_value
      getter = HConfigGetter(hconfig, label, found)
      ! The label is not present in ESMF_HConfig.
      ! The DEFAULT is provided.
      call get_value(getter, value, DEFAULT, rc=status)
      @assertEqual(0, status, ERROR_NONZERO // ' on DEFAULT only')
      ! Therefore value must equal DEFAULT.
      @assertEqual(DEFAULT, value, 'Value does not equal DEFAULT.')

      !label with HCONFIG_VALUE is added to ESMF_HConfig.
      label = 'ochre'
      call ESMF_HConfigAdd(hconfig, HCONFIG_VALUE, addKeyString=label, rc=status)
      @assertEqual(0, status, 'Add failed.')

      found = .TRUE.
      ! second call to get_value
      getter = HConfigGetter(hconfig, label, found)
      ! Label is present in ESMF_HConfig for the second call to get_value.
      ! Default is not present in call to get_value.
      call get_value(getter, value, rc=status)
      @assertEqual(0, status, ERROR_NONZERO // ' on no DEFAULT')
      ! Therefore value must equal HCONFIG_VALUE.
      @assertEqual(HCONFIG_VALUE, value, 'Value does not equal HConfig value.')
      
      ! third call to get_value
      ! DEFAULT is provided, but value in ESMF_HConfig is present.
      call get_value(getter, value, DEFAULT, rc=status)
      @assertEqual(0, status, ERROR_NONZERO // ' on value and DEFAULT')
      ! Therefore, value should equal the value in ESMF_HConfig.
      ! This shows that the DEFAULT value is not used when the value is present in ESMF_HConfig.
      @assertEqual(HCONFIG_VALUE, value, 'Value does not equal HConfig value with DEFAULT.')

   end subroutine test_get_value

   @Before
   subroutine set_up()
      integer :: status

      if(.not. hconfig_is_created) then
         hconfig = ESMF_HConfigCreate(rc=status)
         hconfig_is_created = (status == 0)
      end if
      @assertTrue(hconfig_is_created, 'HConfig was not created.')

   end subroutine set_up

   @After
   subroutine tear_down()
      integer :: status

      if(hconfig_is_created) call ESMF_HConfigDestroy(hconfig, rc=status)
      hconfig_is_created = .FALSE.
      @assertFalse(hconfig_is_created, 'HConfig was not destroyed.')

   end subroutine tear_down

end module Test_mapl3g_hconfig_getter
