#include "MAPL_ErrLog.h"
module mapl3hconfig_get_private
   use :: esmf, only: ESMF_HConfig, ESMF_HConfigIsDefined, MAXSTRLEN => ESMF_MAXSTR
   use :: esmf, only: ESMF_HConfigAsI4, ESMF_KIND_I4, ESMF_HConfigAsI8, ESMF_KIND_I8
   use :: esmf, only: ESMF_HConfigAsR4, ESMF_KIND_R4, ESMF_HConfigAsR8, ESMF_KIND_R8
   use :: esmf, only: ESMF_HConfigAsLogical, ESMF_HConfigAsString
   use mapl_KeywordEnforcer
   use mapl_ErrorHandling

   implicit none

   public :: MAXSTRLEN
   public :: get_value

   interface get_value
      module procedure :: get_value_scalar
   end interface get_value

   character(len=*), parameter :: TYPESTRING_I4 = 'I4'
   character(len=*), parameter :: TYPESTRING_I8 = 'I8'
   character(len=*), parameter :: TYPESTRING_R4 = 'R4'
   character(len=*), parameter :: TYPESTRING_R8 = 'R8'
   character(len=*), parameter :: TYPESTRING_L = 'L'
   character(len=*), parameter :: TYPESTRING_CH = 'CH'
   
   abstract interface
      subroutine ValueSetter(this, rc)
         class(HConfigValue), intent(inout) :: this
         integer, optional, intent(out) :: rc
      end subroutine ValueSetter
      function StringGetter(this) result(string)
         character(len=:), allocatable :: string
         class(HConfigValue), intent(inout) :: this
      end function StringGetter
      function StateChecker(this) result(truth)
         logical :: truth
         class(HConfigValue), intent(in) :: this
      end function StateChecker
      subroutine StateCheckerRC(this, truth, rc)
         class(HConfigValue), intent(in) :: this
         logical, intent(out) :: truth
         integer, optional, intent(out) :: rc
      end subroutine StateCheckerRC
   end abstract interface

   type, abstract :: HConfigValue
      type(ESMF_HConfig) :: hconfig_
      character(len=:), allocatable :: keystring_
      character(len=:), allocatable :: typestring_
      character(len=:), allocatable :: valuestring_
      logical :: value_is_set_ = .FALSE.
      logical :: value_equals_default_ = .FALSE.
      logical :: keystring_found_ = .FALSE.
      integer :: last_status_ = 0
   contains
      public
      procedure, public :: set_value
      procedure(StateChecker), deferred :: value_equals_default
      procedure(ValueSetter), deferred :: set_from_default
      procedure(ValueSetter), deferred :: set_from_hconfig
      procedure(ValueSetter), deferred :: set_valuestring
      procedure, private :: has_default 
   end type HConfigValue

   type, extends(HConfigValue) :: HConfigValueI4
      integer(kind=ESMF_KIND_I4) :: value_
      integer(kind=ESMF_KIND_I4), allocatable :: default_
   contains
      procedure(ValueSetter), deferred :: set_from_hconfig_i4
      procedure(ValueSetter), deferred :: set_from_default_i4
      procedure(StateChecker), deferred :: value_equals_default_i4
      procedure(ValueSetter), deferred :: set_valuestring_i4
   end type HConfigValueI4

contains
      
   function value_equals_default_i4(this) result(truth)
      logical :: truth
      class(HConfigValueI4), intent(in) :: this
      truth = (this%value_ == this%default_)
   end function value_equals_default_i4

   subroutine set_from_hconfig_i4(this, rc)
      class(HConfigValueI4), intent(inout) :: this
      integer, optional, intent(out) :: rc
      integer :: status
      this%value_ = ESMF_HConfigAsI4(this%hconfig_, keyString=this%keystring_, _RC)
      _RETURN(_SUCCESS)
   end subroutine set_from_hconfig_i4

   subroutine set_from_default_i4(this, rc)
      class(HConfigValueI4), intent(inout) :: this
      integer, optional, intent(out) :: rc
      integer :: status
      this%value_ = this%default_
      _RETURN(_SUCCESS)
   end subroutine set_from_default_i4

   subroutine set_valuestring_i4(this, rc)
      class(HConfigValueI4), intent(inout) :: this
      integer, optional, intent(out) :: rc
      integer :: status
      write(string, fmt='(I12)', iostat=rc) this%value
      _RETURN(_SUCCESS)
   end subroutine set_valuestring_i4

   function construct_hconfig_value_i4(value, default) result(this)
      type(HConfigValueI4) :: this
      integer(kind=ESMF_KIND_I4), intent(in) :: value
      class(*), optional, intent(in) :: default

      if(present(default)) then
         select type (default)
         type is (integer(kind=ESMF_KIND_I4))
            this%default_ = default
         end select type
      end if
      this%typestring_ = TYPESTRING_I4
   end function construct_hconfig_value_i4

   subroutine set_value(this, rc)
      class(HConfigValue), intent(inout) :: this
      integer, optional, intent(out) :: rc
      integer :: status
      logical :: keystring_found, has_default

      status = 0
      keystring_found = allocated(this%keystring_)
      has_default = allocated(this%default_)
      if(keystring_found) then
         call this%set_from_hconfig(_RC)
         this%value_equals_default_ = this%value_equals_default():w

      else if(has_default) then
         call this%set_from_default(_RC)
         this%value_equals_default_ = .TRUE.
      else
         _RETURN(_SUCCESS)
      end if

      this%value_is_set_ = .TRUE.
      _RETURN(_SUCCESS)
   end subroutine set_value

         


   logical function value_is_set(this)
      class(HConfigValue), intent(in) :: this
      value_is_set = this%value_is_set_
   end function value_is_set

   logical function value_equals_default(this)
      class(HConfigValue), intent(in) :: this
      value_equals_default = this%value_equals_default_
   end function value_equals_default

   logical function has_default(this)
      class(HConfigValue), intent(in) :: this
      has_default = allocated(this%default_)
   end function has_default

   function typestring(this) result(typestring)
      class(HConfigValue), intent(in) :: this
      character(len=:), allocatable :: typestring
      typestring = this%typestring_
   end function typestring
   
   function valuestring(this) result(valuestring)
      class(HConfigValue), intent(in) :: this
      character(len=:), allocatable :: valuestring
      valuestring = this%valuestring_
   end function valuestring

   subroutine set_common_fields
      if(keystring_found_) then
         call this%set_from_hconfig(_RC)
         if(has_default) this%value_equals_default_ = this%check_value_equals_default()
      else if(has_default) then
         call this%set_to_default()
         this%value_equals_default_ = .TRUE.
      end if
      this%value_is_set_ = .TRUE.
      call this%set_valuestring(this%valuestring_, _RC)
         
   end subroutine set_common_fields

   subroutine get_value_scalar(hconfig, keystring, value, found, unusable, default, equals_default, typestring, valuestring, rc)
      type(ESMF_HConfig), intent(inout) :: hconfig
      character(len=*), intent(in) :: keystring
      class(*), intent(inout) :: value
      logical, intent(out) :: found
      class(KeywordEnforcer), optional, intent(in) :: unusable
      class(*), optional, intent(inout) :: default
      logical, optional, intent(out) :: equals_default
      character(len=:), allocatable, optional, intent(inout) :: typestring
      character(len=:), allocatable, optional, intent(inout) :: valuestring
      integer, intent(out) :: rc

      integer :: status
      integer :: ios
      character(len=MAXSTRLEN) :: rawstring
      character(len=:), allocatable :: typestring_
      character(len=:), allocatable :: valuestring_

      _ASSERT(.not. (present(equals_default) .and. .not. present(default)), 'equals_default requires default')
      found = ESMF_HConfigIsDefined(hconfig, keystring=keystring, _RC)
      _RETURN_UNLESS(found .or. present(default))

      ! fct(hconfig, keystring, value, found, typestring, valuestring, default, rc)
!         type(ESMF_HConfig), intent(inout) :: hconfig
!         character(len=*), intent(in) :: keystring
!         integer(kind=ESMF_KIND_I4), intent(out) :: value
!         logical, intent(inout) :: found
!         character(len=:), allocatable, intent(out) :: typestring
!         character(len=:), allocatable, intent(out) :: valuestring
!         class(*), optional, intent(in) :: default
!         integer, optional, intent(out) :: rc
!         integer :: status

         ! found and present(default): get hconfig & compare
         ! not found and present(default): value = default & compare true
         ! found and not(present(default)): get hconfig & compare false
         ! not found and not(present(default)): error
         if(found) then
            value = ESMF_HConfigAsI4(hconfig, keystring=keystring, _RC)
         end if
         if(present(default)) then
            select type(default)
            type is (integer(kind=ESMF_KIND_I4))


      if(present(default)) then
         select type(value)
         type is (integer(kind=ESMF_KIND_I4))
            select type(default)
            type is (integer(kind=ESMF_KIND_I4))
               value = default
            end select
         type is (integer(kind=ESMF_KIND_I8))
            select type(default)
            type is (integer(kind=ESMF_KIND_I8))
               value = default
            end select
         type is (real(kind=ESMF_KIND_R4))
            select type(default)
            type is (integer(kind=ESMF_KIND_R4))
               value = default
            end select
         type is (real(kind=ESMF_KIND_R8))
            select type(default)
            type is (integer(kind=ESMF_KIND_R8))
               value = default
            end select
         type is (logical)
            select type(default)
            type is (logical)
               value = default
            end select
         type is (character(len=*))
            select type(default)
            type is (character(len=*))
               value = default
            end select
         class default
            _FAIL('Unsupported type for conversion')
         end select
      else
         select type(value)
         type is (integer(kind=ESMF_KIND_I4))
            value = ESMF_HConfigAsI4(hconfig, keyString=keystring, _RC)
            write(rawstring, fmt='(I12)', iostat=ios) value
            typestring_ = TYPESTRING_I4
         type is (integer(kind=ESMF_KIND_I8))
            value = ESMF_HConfigAsI8(hconfig, keyString=keystring, _RC)
            write(rawstring, fmt='(I22)', iostat=ios) value
            typestring_ = TYPESTRING_I8
         type is (real(kind=ESMF_KIND_R4))
            value = ESMF_HConfigAsR4(hconfig, keyString=keystring, _RC)
            write(rawstring, fmt='(G17.8)', iostat=ios) value
            typestring_ = TYPESTRING_R4
         type is (real(kind=ESMF_KIND_R8))
            value = ESMF_HConfigAsR8(hconfig, keyString=keystring, _RC)
            write(rawstring, fmt='(G24.16)', iostat=ios) value
            typestring_ = TYPESTRING_R8
         type is (logical)
            value = ESMF_HConfigAsLogical(hconfig, keyString=keystring, _RC)
            write(rawstring, fmt='(L1)', iostat=ios) value
            typestring_ = TYPESTRING_L
         type is (character(len=*))
            value = ESMF_HConfigAsString(hconfig, keyString=keystring, _RC)
            rawstring = value
            typestring_ = TYPESTRING_CH
         class default
            _FAIL('Unsupported type for conversion')
         end select
      end if

      _ASSERT(ios == 0, 'Failed to write value to rawstring')
      valuestring_ = trim(adjustl(rawstring))
      _ASSERT(len(valuestring) > 0, 'valuestring is empty.')
      if(present(valuestring)) valuestring = valuestring_
      if(present(typestring)) typestring = typestring_
      _RETURN(_SUCCESS)
      _UNUSED_DUMMY(unusable)

   end subroutine get_value_scalar

end module mapl3hconfig_get_private
