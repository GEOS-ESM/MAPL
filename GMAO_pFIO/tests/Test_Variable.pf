! CFIO is mostly a container composed of FTL containers.  As such,
! most of the tests here are just to drive the formulation of the
! interface, not the algorithms.

module Test_VariableMod
   use pfunit_mod
   use pFIO_AttributeMod
   use pFIO_VariableMod
   use pFIO_StringVectorMod
   use pFIO_ConstantsMod
   use, intrinsic :: iso_fortran_env, only: INT32, INT64
   use, intrinsic :: iso_fortran_env, only: REAL32, REAL64
   implicit none

   ! Need an empty integer array for some tests
   integer :: empty(0)

contains

   @test
   subroutine test_get_type()
      type (Variable) :: var

      var = Variable(pFIO_INT32)
      @assertEqual(pFIO_INT32, var%get_type())

      var = Variable(pFIO_INT64)
      @assertEqual(pFIO_INT64, var%get_type())

      var = Variable(pFIO_REAL32, dimensions='x,y')
      @assertEqual(pFIO_REAL32, var%get_type())
      
   end subroutine test_get_type

   @test
   subroutine test_get_ith_dimension()
      type (Variable) :: var


      var = Variable(pFIO_INT32, dimensions='x')
      @assertEqual('x', var%get_ith_dimension(1))

      var = Variable(pFIO_INT32, dimensions='x,yz,qqq')
      @assertEqual('yz', var%get_ith_dimension(2))
      @assertEqual('qqq', var%get_ith_dimension(3))
      
   end subroutine test_get_ith_dimension

   @test
   subroutine test_get_attribute_scalar_int()
      type (Variable) :: var
      type (Attribute), pointer :: attribute
      class (*), pointer :: value
      integer :: EMPTY(0)
      
      var = Variable(pFIO_INT32, dimensions='x')
      call var%add_attribute('pet_age', 15)

      attribute => var%get_attribute('pet_age')
      @assertEqual(EMPTY, attribute%get_shape())

      value => attribute%get_value()
      select type (value)
      type is (integer(INT32))
         @assertEqual(15, value)
      class default
         @assertTrue(1==2)
      end select

   end subroutine test_get_attribute_scalar_int

   @test
   subroutine test_get_attribute_real_double()
      type (Variable) :: var
      type (Attribute), pointer :: attribute
      class (*), pointer :: values(:)

      var = Variable(pFIO_INT32, dimensions='x')
      call var%add_attribute('pet_size', [15._REAL64,24._REAL64])

      attribute => var%get_attribute('pet_size')
      @assertEqual([2], attribute%get_shape())

      values => attribute%get_values()
      select type (values)
      type is (real(REAL64))
         @assertEqual([15,24], values)
      class default
         @assertTrue(1==2)
      end select

   end subroutine test_get_attribute_real_double

   @test
   subroutine test_get_attribute_string()
      type (Variable) :: var
      type (Attribute), pointer :: attribute
      class (*), pointer :: value

      integer :: EMPTY(0)
      var = Variable(pFIO_INT32, dimensions='x')
      call var%add_attribute('pet_name', 'kitty')

      attribute => var%get_attribute('pet_name')
      @assertEqual(empty, attribute%get_shape())

      value => attribute%get_value()
      select type (value)
      type is (character(len=*))
         @assertEqual('kitty', value)
      type is (StringWrap)
         @assertEqual('kitty', value%value)
      class default
         @assertTrue(1==2)
      end select

   end subroutine test_get_attribute_string


   @test
   subroutine test_equal_diff_dims()
      type (Variable) :: v1, v2

      v1 = Variable(pFIO_INT32, dimensions='x')
      v2 = v1
      @assertTrue(v1 == v2)
      @assertFalse(v1 /= v2)
      
      v2 = Variable(pFIO_INT32, dimensions='y')

      @assertTrue(v1 == v1)
      @assertFalse(v1 == v2)

      ! dimension order matters
      v1 = Variable(pFIO_INT32, dimensions='x,y')
      v2 = Variable(pFIO_INT32, dimensions='y,x')
      @assertFalse(v1 == v2)
      
   end subroutine test_equal_diff_dims

   @test
   subroutine test_equal_diff_attributes()
      type (Variable) :: v1, v2

      v1 = Variable(pFIO_INT32, dimensions='x')
      v1 = v2

      call v1%add_attribute('attr1', 1)
      @assertFalse(v1 == v2)
      ! guard against missing extra items in v2
      @assertFalse(v2 == v1)

      call v1%add_attribute('attr2', 2.)
      call v2%add_attribute('attr2', 2.)
      call v2%add_attribute('attr1', 1)
      @assertTrue(v1 == v2)

      call v1%add_attribute('attr3', 'cat')
      call v2%add_attribute('attr3', 'dog')
      @assertFalse(v1 == v2)

   end subroutine test_equal_diff_attributes

   @test
   subroutine test_serialize()
      type (Variable) :: v1, v2
      integer,allocatable :: buffer(:)

      v1 = Variable(pFIO_INT32, dimensions='x,y')
      call v1%add_attribute('attr2', 2.)
      call v1%add_attribute('attr1', 1.)
      call v1%add_attribute('attr3', 'cat')

      call v1%serialize(buffer)
      call v2%deserialize(buffer)
      @assertTrue(v1 == v2)     

   end subroutine
end module Test_VariableMod


