#include "MAPL_TestErr.h"
module Test_MeanAction

   use mapl3g_MeanAction
   use accumulator_action_test_common
   use esmf
   use funit
   use MAPL_FieldUtils
   implicit none

contains

   @Test
   subroutine test_calculate_mean_R4()
      type(MeanAction) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      integer(kind=ESMF_KIND_I4), parameter :: COUNTER = 4
      real(kind=ESMF_KIND_R4), parameter :: MEAN = 4.0_R4
      logical :: matches_expected
      real(kind=ESMF_KIND_R4), pointer :: fptr(:)
      integer(kind=ESMF_KIND_I4), pointer :: ifptr(:)
      integer :: n
      logical, allocatable :: mask(:)
      
      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      call assign_fptr(acc%counter_field, ifptr, _RC)
      ifptr = COUNTER

      ! All points are not UNDEF and counter > 0
      call acc%calculate_mean_R4(_RC)
      matches_expected = FieldIsConstant(acc%accumulation_field, MEAN, _RC)
      @assertTrue(matches_expected, 'accumulation_field not equal to MEAN')

      ! One point is UNDEF
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      call assign_fptr(acc%accumulation_field, fptr, _RC)
      n = size(fptr)-1
      call set_undef(fptr(n))
      allocate(mask(size(fptr)))
      mask = .TRUE.
      mask(n) = .FALSE.
      call acc%calculate_mean_R4(_RC)
      @assertTrue(all(pack(fptr, mask) == MEAN), 'Some valid points not equal to MEAN')
      @assertTrue(undef(fptr(n)), 'mean at point was not UNDEF')
      
      ! counter 0 at one point
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      call assign_fptr(acc%counter_field, fptr, _RC)
      fptr(n) = 0
      mask = fptr /= 0
      call assign_fptr(acc%accumulation_field, fptr, _RC)
      call acc%calculate_mean_R4(_RC)
      @assertTrue(all(pack(fptr, mask) == MEAN), 'Some valid points not equal to MEAN')
      @assertTrue(undef(fptr(n)), 'mean at point was not UNDEF')
      
      ! One point is UNDEF; counter 0 at one point
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      call assign_fptr(acc%accumulation_field, fptr, _RC)
      call set_undef(fptr(n))
      mask = mask .or. (.not. undef(fptr))
      call acc%calculate_mean_R4(_RC)
      @assertTrue(all(pack(fptr, mask) == MEAN), 'Some valid points not equal to MEAN')
      @assertTrue(undef(fptr(n)), 'mean at point was not UNDEF')
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_calculate_mean_R4

   @Test
   subroutine test_clear()
      type(MeanAction) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      integer(kind=ESMF_KIND_I4), parameter :: COUNTER = 4
      logical :: cleared = .FALSE.
      integer(kind=ESMF_KIND_I4), pointer :: fptr(:)

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call assign_fptr(acc%counter_field, fptr, _RC)
      fptr = COUNTER
      call acc%clear(_RC)
      call assign_fptr(acc%counter_field, fptr, _RC)
      cleared = all(fptr == 0)
      @assertTrue(cleared, 'Counter field is nonzero.')
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_clear

   @Test
   subroutine test_invalidate()
      type(MeanAction) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      integer, parameter :: N = 4
      integer :: i
      type(ESMF_Field) :: importField
      logical :: counter_is_set = .FALSE.
      integer(kind=ESMF_KIND_I4), pointer :: fptr(:)

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call get_field(importState, importField, _RC)
      call FieldSet(importField, 1.0_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call assign_fptr(acc%counter_field, fptr, _RC)
      counter_is_set = all(fptr == 0)
      @assertTrue(counter_is_set, 'Counter field is nonzero.')
      do i=1, N
         call acc%invalidate(importState, exportState, clock, _RC)
      end do
      call assign_fptr(acc%counter_field, fptr, _RC)
      counter_is_set = all(fptr == N)
      @assertTrue(counter_is_set, 'counter_scalar not equal to N')
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_invalidate

   subroutine test_accumulate_mean_R4()
      type(MeanAction) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      type(ESMF_Field) :: update_field
      real(kind=ESMF_KIND_R4), pointer :: upPtr(:), accPtr(:)
      real(kind=ESMF_KIND_R4), parameter :: IMPORT_VALUE = 2.0_R4
      real(kind=ESMF_KIND_R4), parameter :: UPDATE_VALUE = 3.0_R4
      real(kind=ESMF_KIND_R4) :: result_value = IMPORT_VALUE
      integer :: n
      type(ESMF_Field) :: importField

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call get_field(importState, importField, _RC)
      call FieldSet(importField, IMPORT_VALUE, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call initialize_field(update_field, typekind=ESMF_TYPEKIND_R4, _RC)
      call assign_fptr(update_field, upPtr, _RC)
      upPtr = UPDATE_VALUE

      ! accumulated not undef, update_field not undef
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      call assign_fptr(acc%accumulation_field, accPtr, _RC)
      @assertTrue(all(accPtr == result_value), 'accumulation_field not equal to expected value.')

      ! accumulated undef at point, update_field not undef
      call assign_fptr(acc%accumulation_field, accPtr, _RC)
      n = size(accPtr) - 1
      call set_undef(accPtr(n))
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      @assertTrue(undef(accPtr(n)), 'invalid point is not UNDEF')
      @assertTrue(all(pack(accPtr, .not. undef(accPtr)) == result_value), 'valid point not equal to expected value.')

      ! accumulated undef at point, update_field undef at point
      n = size(upPtr) - 1
      call set_undef(upPtr(n))
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      @assertTrue(undef(accPtr(n)), 'invalid point is not UNDEF')

      ! accumulated not undef, update_field undef at point
      call FieldSet(importField, result_value, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      @assertTrue(undef(accPtr(n)), 'invalid point is not UNDEF')
      @assertTrue(all(pack(accPtr, .not. undef(upPtr)) == result_value), 'valid point not equal to expected value.')
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_accumulate_mean_R4

   @Test
   subroutine test_initialize()
      type(MeanAction) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      logical :: equals_expected_value 
      integer(kind=ESMF_KIND_I4), pointer :: fptr(:)

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call assign_fptr(acc%counter_field, fptr, _RC)
      equals_expected_value = all(fptr == 0)
      @assertTrue(equals_expected_value, 'counter_field was not cleared.')
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_initialize
   
end module Test_MeanAction
