module Test_SimpleParentGridComp
   use mapl3g_GenericConfig
   use mapl3g_GenericPhases
   use mapl3g_Generic
   use mapl3g_UserSetServices
   use mapl3g_GenericGridComp, only: create_grid_comp
   use mapl3g_GenericGridComp, only: setServices
   use mapl3g_ChildComponent
   use mapl3g_OuterMetaComponent, only: OuterMetaComponent
   use mapl3g_OuterMetaComponent, only: get_outer_meta
   use esmf
   use nuopc
   use pFunit
   use yaFyaml
   implicit none

   type :: States_T
      type(ESMF_State) :: import_state
      type(ESMF_State) :: export_state
   end type States_T

contains

   ! This macro should only be used as safety for "unexpected" exceptions.
#define _VERIFY(status) if(status /= 0) then; rc=status;print*,'ERROR AT: ',__FILE__,__LINE__, status; return; endif
#define _RC rc=status); _VERIFY(status
   subroutine setup(outer_gc, states, rc)
      type(ESMF_GridComp), intent(inout) :: outer_gc
      type(States_T), intent(out) :: states
      integer, intent(out) :: rc
      
      integer :: status, userRC
      type(ESMF_Grid) :: grid
      type(ESMF_Clock) :: clock
      type(Parser) :: p
      type(GenericConfig) :: config
      integer :: i

      rc = 0
      call NUOPC_FieldDictionarySetup('./configs/FieldDictionary.yml', _RC)

      p = Parser()
      config = GenericConfig(yaml_cfg=p%load_from_file('./configs/parent.yaml', rc=status))
      @assert_that(status, is(0))

      outer_gc = create_grid_comp('P', user_setservices('libsimple_parent_gridcomp'), config, _RC)
      call ESMF_GridCompSetServices(outer_gc, setServices, userRC=userRC, _RC)
      _VERIFY(userRC)
      grid = ESMF_GridCreateNoPeriDim(maxIndex=[4,4], name='I_AM_GROOT', _RC)
      call MAPL_GridCompSetGeomBase(outer_gc, grid, _RC)

      associate (import => states%import_state, export => states%export_state)
        import = ESMF_StateCreate(_RC)
        export = ESMF_StateCreate(_RC)

        do i = 1, size(GENERIC_INIT_PHASE_SEQUENCE)
           associate (phase => GENERIC_INIT_PHASE_SEQUENCE(i))
             call ESMF_GridCompInitialize(outer_gc, &
                  importState=import, exportState=export, clock=clock, &
                  phase=phase, userRC=userRC, _RC)
             _VERIFY(userRC)
           end associate
        end do

      end associate

      rc = 0

   end subroutine setup


   subroutine tearDown(outer_gc)
      type(ESMF_GridComp), intent(inout) :: outer_gc
   end subroutine tearDown


   @test(npes=[0])
   subroutine test_import_items_created(this)
      class(MpiTestMethod), intent(inout) :: this

      integer :: status
      type(ESMF_GridComp) :: outer_gc

      type(ESMF_Field) :: f
      type(OuterMetaComponent), pointer :: outer_meta
      type(States_T) :: states

      call setup(outer_gc, states, status)
      @assert_that(status, is(0))
      outer_meta => get_outer_meta(outer_gc, rc=status)
      @assert_that(status, is(0))

      call check('child_A', 'import', ['I_A1'], rc=status)
      @assert_that(status, is(0))
      call check('child_A', 'export', ['E_A1'], rc=status)
      @assert_that(status, is(0))
      call check('child_B', 'import', ['I_B1'], rc=status)
      @assert_that(status, is(0))
      call check('child_B', 'export', ['E_B1'], rc=status)
      @assert_that(status, is(0))

   contains

      subroutine check(child_name, state_intent, expected_items, rc)
         character(*), intent(in) :: child_name
         character(*), intent(in) :: state_intent

         character(*), intent(in) :: expected_items(:)
         integer, optional, intent(out) :: rc

         type(ESMF_State) :: state
         type(ChildComponent) :: child_comp
         integer :: i

         rc = -1
         child_comp = outer_meta%get_child(child_name, rc=status)
         @assert_that('child <'//child_name//'> not found.', status, is(0))
         call get_state(child_comp, state_intent, state, rc=status)
         @assert_that('invalid state intent', status, is(0))

         do i = 1, size(expected_items)
            call ESMF_StateGet(state, trim(expected_items(i)), f, rc=status)
            @assert_that('Item <'//trim(expected_items(i))//'> not found in child <'//child_name//'>.', status, is(0))
         end do

         rc = 0
      end subroutine check

   end subroutine test_import_items_created

   subroutine get_state(child_comp, state_intent, state, rc)
      type (ChildComponent), intent(in) :: child_comp
      character(*), intent(in) :: state_intent
      type(ESMF_State), intent(out) :: state
      integer, optional, intent(out) :: rc

      rc = -1
      select case (state_intent)
      case ('import')
         state = child_comp%import_state
      case ('export')
         state = child_comp%export_state
!!$      case ('internal')
!!$         ???
      case default
         @assertTrue(1==2, 'unknown state intent: <'//state_intent//'>.')
      end select
      rc = 0
   end subroutine get_state

   @test(npes=[0])
   subroutine test_complete_items(this)
      class(MpiTestMethod), intent(inout) :: this

      integer :: status
      type(ESMF_GridComp) :: outer_gc

      type(ESMF_Field) :: f
      type(OuterMetaComponent), pointer :: outer_meta

      type(States_T) :: states

      call setup(outer_gc, states, status)
      @assert_that(status, is(0))
      outer_meta => get_outer_meta(outer_gc, rc=status)
      @assert_that(status, is(0))

      call check('child_A', 'import', 'I_A1', ESMF_FIELDSTATUS_GRIDSET, rc=status)
      @assert_that(status, is(0))
      call check('child_A', 'export', 'E_A1', ESMF_FIELDSTATUS_COMPLETE, rc=status)
      @assert_that(status, is(0))

      call check('child_B', 'import', 'I_B1', ESMF_FIELDSTATUS_COMPLETE, rc=status)
      @assert_that(status, is(0))
      call check('child_B', 'export', 'E_B1', ESMF_FIELDSTATUS_GRIDSET, rc=status)
      @assert_that(status, is(0))

      if(.false.) print*,shape(this)
   contains

      subroutine check(child_name, state_intent, item, expected_status, rc)
         character(*), intent(in) :: child_name
         character(*), intent(in) :: state_intent

         character(*), intent(in) :: item
         type(ESMF_FieldStatus_Flag), intent(in) :: expected_status
         integer, optional, intent(out) :: rc

         type(ESMF_State) :: state
         type(ChildComponent) :: child_comp
         type(ESMF_FieldStatus_Flag) :: field_status

         rc = -1
         child_comp = outer_meta%get_child(child_name, rc=status)
         @assert_that('child <'//child_name//'> not found.', status, is(0))
         call get_state(child_comp, state_intent, state, rc=status)
         @assert_that('invalid state intent', status, is(0))

         call ESMF_StateGet(state, item, f, rc=status)
         @assert_that('Item <'//item//'> not found in child <'//child_name//'>.', status, is(0))

         call ESMF_FieldGet(f, status=field_status, rc=status)
         @assert_that('FieldGet failed? ', status, is(0))

         @assert_that(expected_status == field_status, is(true()))

         rc = 0
      end subroutine check
      
   end subroutine test_complete_items



end module Test_SimpleParentGridComp
