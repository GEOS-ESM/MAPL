module Test_SimpleParentGridComp
   use mapl3g_GenericConfig
   use mapl3g_GenericPhases
   use mapl3g_Generic
   use mapl3g_UserSetServices
   use mapl3g_GenericGridComp, only: create_grid_comp
   use mapl3g_GenericGridComp, only: setServices
   use mapl3g_OuterMetaComponent, only: OuterMetaComponent
   use mapl3g_OuterMetaComponent, only: get_outer_meta
   use esmf
   use nuopc
   use pFunit
   use yaFyaml
   implicit none

contains

   subroutine setup(outer_gc, config, rc)
      type(ESMF_GridComp), intent(inout) :: outer_gc
      type(GenericConfig), intent(in) :: config
      integer, intent(out) :: rc
      
      integer :: status, userRC

      outer_gc = create_grid_comp('P', user_setservices('libsimple_parent_gridcomp'), config, rc=status)
      @assert_that(status, is(0))

      call ESMF_GridCompSetServices(outer_gc, setServices, userRC=userRC, rc=status)
      if (status /= 0) then
         rc = status
         return
      end if
      if (userRC /= 0) then
         rc = userRC
         return
      end if
      rc = 0

   end subroutine setup


   subroutine tearDown(outer_gc)
      type(ESMF_GridComp), intent(inout) :: outer_gc

   end subroutine tearDown

   @test(npes=[0])
   subroutine test_full_run_sequence(this)
      use scratchpad
      use iso_fortran_env
      use mapl3g_ChildComponent
      class(MpiTestMethod), intent(inout) :: this
      type(GenericConfig) :: config

      integer :: status, userrc
      type(ESMF_GridComp) :: outer_gc
      type(Parser) :: p

      type(ESMF_Clock) :: clock
      type(ESMF_State) :: importState, exportState
      integer :: i
      type(ESMF_Field) :: f
      type(ESMF_Grid) :: grid
      type(OuterMetaComponent), pointer :: outer_meta
      type(ChildComponent) :: child_comp

      call NUOPC_FieldDictionarySetup('./configs/FieldDictionary.yml', rc=status)
      @assert_that(status, is(0))

      p = Parser()
      config = GenericConfig(yaml_cfg=p%load_from_file('./configs/parent.yaml', rc=status))
      @assert_that(status, is(0))

      call setup(outer_gc, config, status)
      @assert_that(status, is(0))

      grid = ESMF_GridCreateNoPeriDim(maxIndex=[4,4], name='I_AM_GROOT', rc=status)
      @assert_that(status, is(0))
      call MAPL_GridCompSetGeomBase(outer_gc, grid, rc=status)
      @assert_that(status, is(0))

      importState = ESMF_StateCreate(rc=status)
      @assert_that(status, is(0))
      exportState = ESMF_StateCreate(rc=status)
      @assert_that(status, is(0))
      associate (phases => [ &
           GENERIC_INIT_GRID, &
           GENERIC_INIT_ADVERTISE, &
           GENERIC_INIT_USER ])

        do i = 1, size(phases)
           call ESMF_GridCompInitialize(outer_gc, &
           importState=importState, exportState=exportState, clock=clock, &
           phase=phases(i), userRC=userRC, rc=status)
           @assert_that(userRC, is(0))
           @assert_that(status, is(0))
        end do

      end associate

      outer_meta => get_outer_meta(outer_gc, rc=status)
      @assert_that(status, is(0))

      child_comp = outer_meta%get_child('CHILD_A', rc=status)
      @assert_that(status, is(0))

      call ESMF_StateValidate(child_comp%import_state, rc=status)
      @assert_that(status, is(0))
      call ESMF_StateValidate(child_comp%export_state, rc=status)
      @assert_that(status, is(0))

      call ESMF_StateGet(child_comp%import_state, 'I_1', f, rc=status)
      @assert_that(status, is(0))

      call ESMF_StateGet(child_comp%export_state, 'E_1', f, rc=status)
      @assert_that(status, is(0))

      if(.false.) print*,shape(this)
   end subroutine test_full_run_sequence

end module Test_SimpleParentGridComp
