module Test_Traverse
   use generic3g
   use mapl3g_UserSetServices
   use esmf
   use pFunit
   use yaFyaml
   use scratchpad
   implicit none
   
contains

   @test(npes=[0])
   subroutine test_traverse_pre(this)
      class(MpiTestMethod), intent(inout) :: this

      type(ESMF_GridComp) :: parent_gc
      type(GenericConfig) :: config
      type(OuterMetaComponent), pointer :: outer_meta
      integer :: status, userRC

      call clear_log()

      associate (ss => user_setservices(sharedObj='libsimple_parent_gridcomp'))
        parent_gc = create_grid_comp('A0', ss, config, rc=status)
      end associate
      @assert_that(status, is(0))
      outer_meta => get_outer_meta(parent_gc, rc=status)
      @assert_that(status, is(0))

      associate (ss => user_setservices(sharedObj='libsimple_leaf_gridcomp'))
        call outer_meta%add_child('A1', ss, config, rc=status)
      end associate
      @assert_that(status, is(0))
      call ESMF_GridCompSetServices(parent_gc, setServices, userRC=userRC, rc=status)
      @assert_that(status, is(0))
      @assert_that(userRC, is(0))

      call outer_meta%traverse(pre=pre, rc=status)
      @assert_that(status, is(0))

      @assertEqual('pre<[A0]> :: pre<[A1]>', log)

      
   end subroutine test_traverse_pre
      
   @test(npes=[0])
   subroutine test_traverse_post(this)
      class(MpiTestMethod), intent(inout) :: this

      type(ESMF_GridComp) :: parent_gc
      
      integer :: status, userRC
      type(GenericConfig) :: config
      type(OuterMetaComponent), pointer :: outer_meta

      call clear_log()
      
      associate (ss => user_setservices(sharedObj='libsimple_parent_gridcomp'))
        parent_gc = create_grid_comp('A0', ss, config, rc=status)
      end associate
      @assert_that(status, is(0))
      outer_meta => get_outer_meta(parent_gc, rc=status)
      @assert_that(status, is(0))

      associate (ss => user_setservices(sharedObj='libsimple_leaf_gridcomp'))
        call outer_meta%add_child('A1', ss, config, rc=status)
      end associate
      @assert_that(status, is(0))
      call ESMF_GridCompSetServices(parent_gc, setServices, userRC=userRC, rc=status)
      @assert_that(status, is(0))
      @assert_that(userRC, is(0))

      call outer_meta%traverse(post=post, rc=status)
      @assert_that(status, is(0))

      @assertEqual('post<[A1]> :: post<[A0]>', log)
      
   end subroutine test_traverse_post
      
   @test(npes=[0])
   subroutine test_traverse_complex(this)
      use mapl3g_ChildComponent
      class(MpiTestMethod), intent(inout) :: this

      type(ESMF_GridComp) :: parent_gc
      
      integer :: status, userRC
      type(GenericConfig) :: config
      type(OuterMetaComponent), pointer :: outer_meta, child_meta
      type(ChildComponent) :: child
      character(:), allocatable :: expected
      type(ESMF_GridComp) :: child_outer_gc

      call clear_log()
      
      associate ( &
           ss_parent => user_setservices(sharedObj='libsimple_parent_gridcomp'), &
           ss_leaf   => user_setservices(sharedObj='libsimple_leaf_gridcomp'))

        parent_gc = create_grid_comp('A', ss_parent, config, rc=status)
        @assert_that(status, is(0))
        outer_meta => get_outer_meta(parent_gc, rc=status)
        @assert_that(status, is(0))

        call outer_meta%add_child('AB', ss_parent, config, rc=status)
        @assert_that(status, is(0))
        call outer_meta%add_child('AC', ss_parent, config, rc=status)
        @assert_that(status, is(0))

        child = outer_meta%get_child('AB', rc=status)
        @assert_that(status, is(0))
        child_outer_gc = child%get_outer_gridcomp()
        child_meta => get_outer_meta(child_outer_gc, rc=status)
        @assert_that(status, is(0))

        call child_meta%add_child('ABD', ss_leaf, config, rc=status)
        @assert_that(status, is(0))
        call child_meta%add_child('ABE', ss_leaf, config, rc=status)
        @assert_that(status, is(0))
      
        child = outer_meta%get_child('AC', rc=status)
        @assert_that(status, is(0))
        child_outer_gc = child%get_outer_gridcomp()
        child_meta => get_outer_meta(child_outer_gc, rc=status)
        @assert_that(status, is(0))

        call child_meta%add_child('ACF', ss_leaf, config, rc=status)
        @assert_that(status, is(0))
        call child_meta%add_child('ACG', ss_leaf, config, rc=status)
        @assert_that(status, is(0))
      end associate

      call ESMF_GridCompSetServices(parent_gc, setServices, userRC=userRC, rc=status)
      @assert_that(status, is(0))
      @assert_that(userRC, is(0))

      call outer_meta%traverse(post=post, pre=pre, rc=status)
      @assert_that(status, is(0))

      expected = &
           'pre<[A]> :: ' // &
           'pre<[AB]> :: pre<[ABD]> :: post<[ABD]> :: pre<[ABE]> :: post<[ABE]> :: post<[AB]> :: ' // &
           'pre<[AC]> :: pre<[ACF]> :: post<[ACF]> :: pre<[ACG]> :: post<[ACG]> :: post<[AC]> :: ' // &
           'post<[A]>'
      @assertEqual(expected, log)
      
   end subroutine test_traverse_complex

   ! Helper procedure
   subroutine pre(meta, rc)
      class(OuterMetaComponent), intent(inout) :: meta
      integer, optional, intent(out) :: rc

      character(:), allocatable :: name

      name = meta%get_name()
      call append_message('pre<'//name//'>')

      if (present(rc)) rc = 0

   end subroutine pre

   ! Helper procedure
   subroutine post(meta, rc)
      class(OuterMetaComponent), intent(inout) :: meta
      integer, optional, intent(out) :: rc

      character(:), allocatable :: name

      name = meta%get_name()
      call append_message('post<'//name//'>')

      if (present(rc)) rc = 0

   end subroutine post


end module Test_Traverse
