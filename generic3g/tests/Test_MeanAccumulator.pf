#include "MAPL_TestErr.h"
module Test_MeanAccumulator

   use mapl3g_MeanAccumulator
   use accumulator_action_test_common
   use esmf
   use funit
   use MAPL_FieldUtils
   implicit none

contains

   @Test
   subroutine test_calculate_mean_R4()
      type(MeanAccumulator) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      integer(kind=ESMF_KIND_I8), parameter :: COUNTER = 4
      real(kind=ESMF_KIND_R4), parameter :: MEAN = 4.0_R4
      logical :: matches_expected
      real(kind=ESMF_KIND_R4), pointer :: fptr(:)
      integer :: n
      logical, allocatable :: mask(:)
      
      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      acc%counter_scalar = COUNTER
      acc%valid_mean = .TRUE.

      ! FIELD NOT UNDEF, ALL VALID_MEAN
      call acc%calculate_mean_R4(_RC)
      matches_expected = FieldIsConstant(acc%accumulation_field, MEAN, _RC)
      @assert_that(matches_expected, is(true()))

      ! FIELD(n) UNDEF, ALL_VALID_MEAN
      acc%valid_mean = .TRUE.
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      call assign_fptr(acc%accumulation_field, fptr, _RC)
      n = size(fptr)-1
      call set_undef(fptr(n))
      allocate(mask(size(fptr)))
      mask = .TRUE.
      mask(n) = .FALSE.
      call acc%calculate_mean_R4(_RC)
      @assert_that(all(pack(fptr, mask) == MEAN), is(true()))
      @assertTrue(undef(fptr(n)))
      
      ! FIELD NOT UNDEF, VALID_MEAN(n) .FALSE.
      acc%valid_mean = .TRUE.
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      acc%valid_mean(n) = .FALSE.
      call acc%calculate_mean_R4(_RC)
      @assert_that(all(pack(fptr, acc%valid_mean) == MEAN), is(true()))
      @assertTrue(undef(fptr(n)))
      
      ! FIELD(n) UNDEF, VALID_MEAN(n) .FALSE.
      acc%valid_mean = .TRUE.
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      acc%valid_mean(n) = .FALSE.
      call assign_fptr(acc%accumulation_field, fptr, _RC)
      !@assert_that(n <= size(fptr), is(true()))
      call set_undef(fptr(n))
      mask = (.not. undef(fptr)) .and. acc%valid_mean
      call acc%calculate_mean_R4(_RC)
      @assert_that(all(pack(fptr, mask) == MEAN), is(true()))
      @assertTrue(undef(fptr(n)))
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_calculate_mean_R4

   @Test
   subroutine test_calculate_mean()
      type(MeanAccumulator) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      integer(kind=ESMF_KIND_I8), parameter :: COUNTER = 4
      real(kind=ESMF_KIND_R4), parameter :: MEAN = 4.0_R4
      logical :: matches_expected
      type(ESMF_TypeKind_Flag), parameter :: TK = ESMF_TYPEKIND_R4
      
      call initialize_objects(importState, exportState, clock, TK, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call FieldSet(acc%accumulation_field, COUNTER*MEAN, _RC)
      acc%counter_scalar = 0_I8
      acc%valid_mean = .TRUE.

      call acc%calculate_mean()
      @assertExceptionRaised()

      acc%counter_scalar = COUNTER
      call acc%calculate_mean()
      matches_expected = FieldIsConstant(acc%accumulation_field, MEAN, _RC)
      @assert_that(matches_expected, is(true()))
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_calculate_mean

   @Test
   subroutine test_clear_accumulator()
      type(MeanAccumulator) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      acc%counter_scalar = 4
      call acc%clear_accumulator(_RC)
      @assertEqual(acc%counter_scalar, 0_I8)
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_clear_accumulator

   @Test
   subroutine test_clear_valid_mean()
      type(MeanAccumulator) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      acc%valid_mean = .TRUE.
      call acc%clear_valid_mean(_RC)
      @assert_that(.not. any(acc%valid_mean), is(true()))
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_clear_valid_mean

   @Test
   subroutine test_invalidate()
      type(MeanAccumulator) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      integer(kind=ESMF_KIND_I8), parameter :: N = 4_I8
      integer :: i
      type(ESMF_Field) :: importField

      call initialize_objects(importState, exportState, clock, ESMF_TYPEKIND_R4, _RC)
      call get_field(importState, importField, _RC)
      call FieldSet(importField, 1.0_R4, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      @assertEqual(acc%counter_scalar, 0_I8)
      do i=1, N
         call acc%invalidate(importState, exportState, clock, _RC)
      end do
      @assertEqual(acc%counter_scalar, N)
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_invalidate

   subroutine test_accumulate_mean_R4()
      type(MeanAccumulator) :: acc
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock
      integer :: status
      type(ESMF_Field) :: update_field
      type(ESMF_TypeKind_Flag), parameter :: tk =ESMF_TYPEKIND_R4
      type(ESMF_Grid) :: grid
      real(kind=ESMF_KIND_R4), pointer :: upPtr(:), accPtr(:)
      real(kind=ESMF_KIND_R4), parameter :: IMPORT_VALUE = 2.0_R4
      real(kind=ESMF_KIND_R4), parameter :: UPDATE_VALUE = 3.0_R4
      real(kind=ESMF_KIND_R4) :: result_value = IMPORT_VALUE
      integer :: n
      type(ESMF_Field) :: importField

      call initialize_objects(importState, exportState, clock, tk, _RC)
      call get_field(importState, importField, _RC)
      call FieldSet(importField, IMPORT_VALUE, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call initialize_field(update_field, typekind=tk, grid=grid, _RC)
      call assign_fptr(update_field, upPtr, _RC)
      upPtr = UPDATE_VALUE

      ! accumulated not undef, update_field not undef
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      call assign_fptr(acc%accumulation_field, accPtr, _RC)
      @assertTrue(all(accPtr == result_value))

      ! accumulated undef at point, update_field not undef
      call assign_fptr(acc%accumulation_field, accPtr, _RC)
      n = size(accPtr) - 1
      call set_undef(accPtr(n))
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      @assertTrue(undef(accPtr(n)))
      @assert_that(all(pack(accPtr, .not. undef(accPtr)) == result_value), is(true()))

      ! accumulated undef at point, update_field undef at point
      n = size(upPtr) - 1
      call set_undef(upPtr(n))
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      @assertTrue(undef(accPtr(n)))

      ! accumulated not undef, update_field undef at point
      call FieldSet(importField, result_value, _RC)
      call acc%initialize(importState, exportState, clock, _RC)
      call acc%accumulate_R4(update_field, _RC)
      result_value = result_value + UPDATE_VALUE
      @assertTrue(undef(accPtr(n)))
      @assert_that(all(pack(accPtr, .not. undef(upPtr)) == result_value), is(true()))
      call destroy_objects(importState, exportState, clock, _RC)

   end subroutine test_accumulate_mean_R4

   @Before
   subroutine set_up()
      integer :: status

      if(is_initialized()) return
      call ESMF_Initialize(_RC)

   end subroutine set_up

end module Test_MeanAccumulator
