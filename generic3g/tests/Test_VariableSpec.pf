#include "MAPL_TestErr.h"
module Test_VariableSpec
   use mapl3g_VariableSpec
   use esmf
   use pfunit
   use ESMF_TestMethod_mod
   use mapl3g_EsmfRegridder, only: EsmfRegridderParam
   implicit none(type,external)

   character(len=*), parameter :: NONZERO = 'Non-zero status returned'

contains

   @Test
   subroutine test_validate_variable_spec()
      type(VariableSpec) :: spec
      integer :: status
      character(len=*), parameter :: EXCEPT_MSG = 'Invalid value'

      call validate_short_name('F00', rc=status)
      @assertEqual(0, status, NONZERO)

      call validate_short_name('0F00', rc=status)
      @assertExceptionRaised()

      call validate_short_name('_F00', rc=status)
      @assertExceptionRaised()

      call validate_short_name('F_', rc=status)
      @assertEqual(0, status, NONZERO)

      call validate_state_intent(ESMF_STATEINTENT_IMPORT, rc=status)
      @assertEqual(0, status, NONZERO)
      
      call validate_state_intent(ESMF_STATEINTENT_EXPORT, rc=status)
      @assertEqual(0, status, NONZERO)
      
      call validate_state_intent(ESMF_STATEINTENT_INTERNAL, rc=status)
      @assertEqual(0, status, NONZERO)
      
      call validate_state_intent(ESMF_STATEINTENT_UNSPECIFED, rc=status)
      @assertExceptionRaised()
      
      call validate_state_item(ESMF_STATEITEM_STATE, rc=status)
      @assertExceptionRaised()

      call validate_state_item(ESMF_STATEITEM_FIELDBUNDLE, rc=status)
      @assertEqual(0, status, NONZERO)

      call validate_state_item(ESMF_STATEITEM_FIELD, rc=status)
      @assertEqual(0, status, NONZERO)

      call validate_regrid(param=RegridderParam, rc=status)
      @assertEqual(0, status, NONZERO)

      call validate_regrid(method=ESMF_REGRIDMETHOD_BILINEAR, rc=status)
      @assertEqual(0, status, NONZERO)

      call validate_regrid(RegridderParam, ESMF_REGRIDMETHOD_BILINEAR, rc=status)
      @assertExceptionRaised()

   end subroutine test_validate_variable_spec

end module Test_VariableSpec
