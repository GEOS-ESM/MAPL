#include "MAPL_TestErr.h"
#include "MAPL_Generic.h"

! We use ESMF_TestMethod rather than basic TestMethod just in case
! there are any implied barriers is the ESMF construction in these
! tests.  E.g., if we end up needing to create nested grid comps.
! Almost certainly, is unnecessary.

module Test_ModelVerticalGrid

   use mapl_ErrorHandling
   use mapl3g_VerticalStaggerLoc
   use mapl3g_ModelVerticalGrid
   use mapl3g_StateRegistry
   use mapl3g_VariableSpec
   use mapl3g_VirtualConnectionPt
   use mapl3g_ActualConnectionPt
   use mapl3g_StateItemSpec
   use mapl3g_StateItemExtension
   use mapl3g_ComponentDriver
   use mapl3g_ComponentDriver
   use mapl3g_ComponentDriverVector
   use mapl3g_ComponentDriverPtrVector
   use mapl3g_MultiState
   use mapl3g_geom_mgr
   use mapl3g_CouplerPhases, only: GENERIC_COUPLER_UPDATE
   use esmf
   ! testing framework
   use ESMF_TestMethod_mod
   use funit

   implicit none (type, external)

   integer, parameter :: IM=6, JM=7, LM=3

   ! Trying to avoid a complex test fixture
   type(StateRegistry), target :: r

contains

   subroutine setup_(var_name, geom, vgrid, registry, rc)
      character(*), intent(in) :: var_name
      type(ESMF_Geom), intent(in) :: geom
      type(ModelVerticalGrid), intent(in) :: vgrid
      type(StateRegistry), intent(inout) :: registry
      integer, optional, intent(out) :: rc

      type(VerticalStaggerLoc) :: vertical_stagger
      type(VariableSpec) :: var_spec
      type(StateItemSpec) :: fld_spec
      type(VirtualConnectionPt) :: v_pt
      type(StateItemExtension), pointer :: extension
      type(StateItemSpec), pointer :: spec
      integer :: status

      select case(var_name)
      case("PLE")
         vertical_stagger = VERTICAL_STAGGER_EDGE
      case("PL")
         vertical_stagger = VERTICAL_STAGGER_CENTER
      case default
         _FAIL("unsupported var name " // var_name)
      end select

      var_spec = make_VariableSpec(&
           short_name=var_name, &
           state_intent=ESMF_STATEINTENT_EXPORT, &
           standard_name="air_pressure", &
           units="hPa", &
           vertical_stagger=vertical_stagger, &
           default_value=3., _RC)
      fld_spec = var_spec%make_StateItemSpec(r, component_geom=geom, vertical_grid=vgrid, rc=status); _VERIFY(status)
      call fld_spec%create(_RC)

      v_pt = VirtualConnectionPt(state_intent="export", short_name=var_name)
      call registry%add_primary_spec(v_pt, fld_spec)
      extension => registry%get_primary_extension(v_pt, _RC)
      spec => extension%get_spec()
      call spec%set_active()
      call spec%create(_RC)

      _RETURN(_SUCCESS)
   end subroutine setup_

   subroutine setup(geom, vgrid, rc)
      type(ESMF_Geom), intent(out) :: geom
      type(ModelVerticalGrid), intent(out) :: vgrid
      integer, intent(out) :: rc

      integer :: status

      ! geom, registry etc.
      geom = make_geom(_RC)
      r = StateRegistry("dyn")

      vgrid = ModelVerticalGrid(standard_name="air_pressure", units="hPa", num_levels=LM)
      call vgrid%add_short_name(edge="PLE", center="PL")
      call vgrid%set_registry(r) ! MAPL_SetVerticalGrid(...)

      call setup_("PLE", geom, vgrid, r, _RC)
      call setup_("PL", geom, vgrid, r, _RC)

      _RETURN(_SUCCESS)
   end subroutine setup

   function make_geom(rc) result(geom)
      integer, intent(out) :: rc
      type(ESMF_Geom) :: geom
      integer :: status
      type(ESMF_HConfig) :: hconfig
      type(GeomManager), pointer :: geom_mgr
      type(MaplGeom), pointer :: mapl_geom

      rc = 0
      geom_mgr => get_geom_manager()
      hconfig = ESMF_HConfigCreate(content="{class: latlon, im_world: 6, jm_world: 7, pole: PC, dateline: DC}", _RC)
      mapl_geom => geom_mgr%get_mapl_geom(hconfig, _RC)
      geom = mapl_geom%get_geom()
   end function make_geom

   @test
   subroutine test_num_levels()
      type(ModelVerticalGrid) :: vgrid
      integer :: num_levels

      num_levels = 10
      vgrid = ModelVerticalGrid(standard_name="height", units="m", num_levels=num_levels)
      @assert_that(vgrid%get_num_levels(), is(num_levels))
   end subroutine test_num_levels

   @test(type=ESMF_TestMethod, npes=[1])
   subroutine test_created_fields_have_num_levels(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ModelVerticalGrid) :: vgrid
      integer :: rank
      integer, allocatable :: localElementCount(:)
      type(VirtualConnectionPt) :: ple_pt
      type(StateItemSpec), pointer :: spec
      type(MultiState) :: multi_state
      type(StateItemExtension), pointer :: extension
      type(ESMF_Field) :: ple
      type(ESMF_Geom) :: geom
      integer :: rc, status

     call setup(geom, vgrid, _RC)
     call r%allocate(_RC)
      ple_pt = VirtualConnectionPt(state_intent="export", short_name="PLE")
      extension => r%get_primary_extension(ple_pt, _RC)
      spec => extension%get_spec()

      multi_state = MultiState()
      call spec%add_to_state(multi_state, ActualConnectionPt(ple_pt), _RC)
      call ESMF_StateGet(multi_state%exportState, itemName="PLE", field=ple, _RC)
      call ESMF_FieldGet(ple, rank=rank, _RC)
      allocate(localElementCount(rank))
      call ESMF_FieldGet(ple, localElementCount=localElementCount, _RC)
      @assert_that(localElementCount, is(equal_to([IM,JM,LM+1])))

      _UNUSED_DUMMY(this)
   end subroutine test_created_fields_have_num_levels

   @test(type=ESMF_TestMethod, npes=[1])
   ! Request the specific coordinate corresponding particular geom/unit.
   ! In this case we start with one that already exists.  A later test
   ! should force extensions.
   subroutine test_get_coordinate_field_simple(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ModelVerticalGrid) :: vgrid
      class(ComponentDriver), pointer :: coupler
      type(ESMF_Field) :: vcoord
      type(ESMF_Geom) :: geom
      integer :: rc, status
      real(ESMF_KIND_R4), pointer :: a(:,:,:)

      call setup(geom, vgrid, _RC)

      call vgrid%get_coordinate_field( &
           vcoord, coupler, &
           standard_name="air_pressure", &
           geom=geom, &
           typekind=ESMF_TYPEKIND_R4, &
           units="hPa", &
           vertical_stagger=VERTICAL_STAGGER_EDGE, &
           _RC)
      @assert_that(associated(coupler), is(false()))
      call r%allocate()
      
      call ESMF_FieldGet(vcoord, fArrayPtr=a, _RC)
      @assert_that(a, every_item(is(equal_to(3.))))

      _UNUSED_DUMMY(this)
   end subroutine test_get_coordinate_field_simple

   @test(type=ESMF_TestMethod, npes=[1])
   ! Request the specific coordinate corresponding particular geom/unit.
   ! Here we request different units which should return a coordinate
   ! scaled by 100 (hPa = 100 Pa)
   subroutine test_get_coordinate_field_change_units_edge(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ModelVerticalGrid) :: vgrid
      type(ESMF_Field) :: vcoord
      type(ESMF_Geom) :: geom
      integer :: status
      real(ESMF_KIND_R4), pointer :: a(:,:,:)
      type(ComponentDriverPtrVector) :: couplers
      type(ComponentDriverPtr) :: driver
      class(ComponentDriver), pointer :: coupler
      integer :: i, rc

      call setup(geom, vgrid, _RC)

      call vgrid%get_coordinate_field( &
           vcoord, coupler, &
           standard_name="air_pressure", &
           geom=geom, &
           typekind=ESMF_TYPEKIND_R4, &
           units="Pa", &
           vertical_stagger=VERTICAL_STAGGER_EDGE, &
           _RC)
      @assert_that(associated(coupler), is(true()))
      call r%allocate(_RC)

      call ESMF_FieldGet(vcoord, fArrayPtr=a, _RC)
      ! usually update is called on imports, but here we don't have an import handy,
      ! so we force updates on all export couplers in registry r.
      couplers = r%get_export_couplers()
      do i = 1, couplers%size()
         driver = couplers%of(i)
         call driver%ptr%initialize(_RC)
         call driver%ptr%run(phase_idx=GENERIC_COUPLER_UPDATE, _RC)
      end do
      @assert_that(shape(a), is(equal_to([IM, JM, LM+1])))
      @assert_that(a, every_item(is(equal_to(300.))))

      _UNUSED_DUMMY(this)
   end subroutine test_get_coordinate_field_change_units_edge

   @test(type=ESMF_TestMethod, npes=[1])
   ! Request the specific coordinate corresponding particular geom/unit.
   ! Here we request different units which should return a coordinate
   ! scaled by 100 (hPa = 100 Pa)
   subroutine test_get_coordinate_field_change_units_center(this)
      class(ESMF_TestMethod), intent(inout) :: this
      type(ModelVerticalGrid) :: vgrid
      type(ESMF_Field) :: vcoord
      type(ESMF_Geom) :: geom
      integer :: status
      real(ESMF_KIND_R4), pointer :: a(:,:,:)
      type(ComponentDriverPtrVector) :: couplers
      type(ComponentDriverPtr) :: driver
      class(ComponentDriver), pointer :: coupler
      integer :: i, rc

      call setup(geom, vgrid, _RC)

      call vgrid%get_coordinate_field( &
           vcoord, coupler, &
           standard_name="air_pressure", &
           geom=geom, &
           typekind=ESMF_TYPEKIND_R4, units="Pa", &
           vertical_stagger=VERTICAL_STAGGER_CENTER, &
           _RC)
      @assert_that(associated(coupler), is(true()))

      call r%allocate(_RC)

      call ESMF_FieldGet(vcoord, fArrayPtr=a, _RC)
      ! usually update is called on imports, but here we don't have an import handy,
      ! so we force updates on all export couplers in registry r.
      couplers = r%get_export_couplers()
      do i = 1, couplers%size()
         driver = couplers%of(i)
         call driver%ptr%initialize(_RC)
         call driver%ptr%run(phase_idx=GENERIC_COUPLER_UPDATE, _RC)
      end do
      @assert_that(shape(a), is(equal_to([IM, JM, LM])))
      @assert_that(a, every_item(is(equal_to(300.))))
      _UNUSED_DUMMY(this)
   end subroutine test_get_coordinate_field_change_units_center

end module Test_ModelVerticalGrid
