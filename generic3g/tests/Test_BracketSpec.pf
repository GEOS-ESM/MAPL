module Test_BracketSpec
   use funit
   use mapl3g_BracketSpec
   use mapl3g_FieldSpec
   use mapl3g_UngriddedDimsSpec
   use mapl3g_VerticalDimSpec
   use mapl3g_VerticalGeom
   use mapl3g_ActualConnectionPt
   use mapl3g_AbstractStateItemSpec
   use mapl3g_ESMF_Utilities, only: MAPL_TYPEKIND_MIRROR
   use gftl2_StringVector
   use esmf
   implicit none

contains

   @test
   subroutine test_mirror_bracket_size()
      type(BracketSpec) :: spec_1, spec_2, spec_mirror
      type(ESMF_Geom) :: geom

      spec_1 = BracketSpec( &
           field_spec=FieldSpec(geom=geom, vertical_geom=VerticalGeom(), &
           vertical_dim=VerticalDimSpec(), &
           typekind=ESMF_TYPEKIND_R4, &
           ungridded_dims = UngriddedDimsSpec(), &
           standard_name='A', long_name='AA', units='barn'), &
           bracket_size=1)
      spec_2 = BracketSpec( &
           field_spec=FieldSpec(geom=geom, vertical_geom=VerticalGeom(), &
           vertical_dim=VerticalDimSpec(), &
           typekind=ESMF_TYPEKIND_R4, &
           ungridded_dims = UngriddedDimsSpec(), &
           standard_name='A', long_name='AA', units='barn'), &
           bracket_size=2)
      spec_mirror = BracketSpec( &
           field_spec=FieldSpec(geom=geom, vertical_geom=VerticalGeom(), &
           vertical_dim=VerticalDimSpec(), &
           typekind=ESMF_TYPEKIND_R4, &
           ungridded_dims = UngriddedDimsSpec(), &
           standard_name='A', long_name='AA', units='barn'))


      @assert_that(spec_1%can_connect_to(spec_1), is(true()))
      @assert_that(spec_2%can_connect_to(spec_2), is(true()))
      @assert_that(spec_1%can_connect_to(spec_2), is(false()))
      @assert_that(spec_2%can_connect_to(spec_1), is(false()))
      
      @assert_that(spec_mirror%can_connect_to(spec_mirror), is(false()))
      @assert_that(spec_mirror%can_connect_to(spec_1), is(true()))
      @assert_that(spec_mirror%can_connect_to(spec_2), is(true()))
      @assert_that(spec_1%can_connect_to(spec_mirror), is(true()))
      @assert_that(spec_2%can_connect_to(spec_mirror), is(true()))

   end subroutine test_mirror_bracket_size

   @test
   ! Verify that once a bracket size mirrors some concrete value it
   ! can no longer connect to other for bracket size. But can connect to
   ! specs with bracket size the same as first connection.
   subroutine test_connect_unique_mirror()
      type(BracketSpec) :: spec_1, spec_1b, spec_2, spec_mirror
      type(ESMF_Geom) :: geom
      type(ActualConnectionPt) :: actual_pt
      type(StateItemSpecPtr) :: dependency_specs(0)

      integer :: status
      type(ESMF_Grid) :: grid
      type(ESMF_Info) :: info

      grid = ESMF_GridCreateNoPeriDim(maxIndex=[4,4], name='I_AM_GROOT', rc=status)
      call ESMF_InfoGetFromHost(grid, info, rc=status)
      geom = ESMF_GeomCreate(grid, ESMF_STAGGERLOC_INVALID)

      spec_1 = BracketSpec( &
           field_spec=FieldSpec(geom=geom, vertical_geom=VerticalGeom(), &
           vertical_dim=VerticalDimSpec(), &
           typekind=ESMF_TYPEKIND_R4, &
           ungridded_dims = UngriddedDimsSpec(), &
           standard_name='A', long_name='AA', units='barn'), &
           bracket_size=1)
      spec_1b = spec_1

      spec_2 = BracketSpec( &
           field_spec=FieldSpec(geom=geom, vertical_geom=VerticalGeom(), &
           vertical_dim=VerticalDimSpec(), &
           typekind=ESMF_TYPEKIND_R4, &
           ungridded_dims = UngriddedDimsSpec(), &
           standard_name='A', long_name='AA', units='barn'), &
           bracket_size=2)
      spec_mirror = BracketSpec( &
           field_spec=FieldSpec(geom=geom, vertical_geom=VerticalGeom(), &
           vertical_dim=VerticalDimSpec(), &
           typekind=ESMF_TYPEKIND_R4, &
           ungridded_dims = UngriddedDimsSpec(), &
           standard_name='A', long_name='AA', units='barn'))

      call spec_mirror%create(dependency_specs, rc=status)
      @assert_that(status, is(0))
      call spec_mirror%connect_to(spec_1, actual_pt, rc=status)
      @assert_that(status, is(0))

      @assert_that(spec_mirror%can_connect_to(spec_2), is(false()))
      @assert_that(spec_mirror%can_connect_to(spec_1b), is(true()))

   end subroutine test_connect_unique_mirror
      

end module Test_BracketSpec
