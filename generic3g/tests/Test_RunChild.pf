module Test_RunChild
   use mapl3g_GenericGridComp
   use mapl3g_Generic
   use mapl3g_GenericConfig
   use mapl3g_OuterMetaComponent
   use mapl3g_UserSetServices
   use mapl_ErrorHandling
   use esmf
   use pfunit
   use yafyaml
   use scratchpad, only: log, clear_log
   implicit none

   type(ESMF_GridComp) :: parent_gc
   type(ESMF_GridComp) :: user_gc
   type(OuterMetaComponent), pointer :: parent_meta
   
contains

   ! Build a parent gc with 2 children.
   subroutine setup(this, rc)
      class(MpiTestMethod), intent(inout) :: this
      integer, intent(out) :: rc

      type(GenericConfig) :: config
      integer :: status

      associate (ss_parent => user_setservices('libsimple_parent_gridcomp'))
        parent_gc = create_grid_comp('parent', ss_parent, config, rc=status)
      end associate

      @assert_that(status, is(0))
      parent_meta => get_outer_meta(parent_gc, rc=status)
      @assert_that(status, is(0))

      associate (ss_leaf => user_setservices('libsimple_leaf_gridcomp'))
        call parent_meta%add_child('child_1', ss_leaf, config, rc=status)
        @assert_that(status, is(0))
        call parent_meta%add_child('child_2', ss_leaf, config, rc=status)
        @assert_that(status, is(0))
      end associate

      call ESMF_GridCompSetServices(parent_gc, setServices, rc=status)
      @assert_that(status, is(0))

      user_gc = parent_meta%get_user_gridcomp()

      call clear_log()
      rc = ESMF_SUCCESS
   end subroutine setup

   subroutine teardown(this)
      class(MpiTestMethod), intent(inout) :: this
      integer :: status
      call ESMF_GridCompDestroy(parent_gc, rc=status)
      @assert_that(status, is(0))
   end subroutine teardown
      

   @test(npes=[0])
   ! MAPL_run_child() is called from withis _user_ gridcomps.
   subroutine test_MAPL_run_child(this)
      class(MpiTestMethod), intent(inout) :: this
      type(ESMF_Clock) :: clock

      integer :: status

      call setup(this, rc=status)
      @assert_that(status, is(0))
      call MAPL_run_child(user_gc, child_name='child_1', clock=clock, rc=status)
      @assert_that(status, is(0))
      @assertEqual("wasRun_child_1", log)

      call teardown(this)
      
   end subroutine test_MAPL_Run_child

   @test(npes=[0])
   subroutine test_MAPL_Run_child_other_phase(this)
      class(MpiTestMethod), intent(inout) :: this
      type(ESMF_Clock) :: clock

      integer :: status

      call setup(this, rc=status)
      @assert_that(status, is(0))

      call MAPL_run_child(user_gc, child_name='child_1', clock=clock, phase_name='extra', rc=status)
      @assert_that(status, is(0))
      @assertEqual("wasRun_extra_child_1", log)

      call teardown(this)
      
   end subroutine test_MAPL_Run_child_other_phase

   @test(npes=[0])
   subroutine test_init_children(this)
      class(MpiTestMethod), intent(inout) :: this
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock

      integer :: status

      call setup(this, rc=status)
      @assert_that(status, is(0))

      call parent_meta%initialize_user(importState, exportState, clock, rc=status)
      @assert_that(status, is(0))
      @assertEqual("wasInit :: wasInit_child_1 :: wasInit_child_2", log)

      call teardown(this)

   end subroutine test_init_children


   @test(npes=[0])
   subroutine test_finalize_children(this)
      class(MpiTestMethod), intent(inout) :: this
      type(ESMF_State) :: importState, exportState
      type(ESMF_Clock) :: clock

      integer :: status

      call setup(this, rc=status)
      @assert_that(status, is(0))

      call parent_meta%finalize(importState, exportState, clock, rc=status)
      @assert_that(status, is(0))
      @assertEqual("wasFinal :: wasFinal_child_1 :: wasFinal_child_2", log)

      call teardown(this)

   end subroutine test_finalize_children

   @test(npes=[0])
   subroutine test_MAPL_invalid_name(this)
      class(MpiTestMethod), intent(inout) :: this
      
      type(GenericConfig) :: config

      integer :: status

      associate (ss_parent => user_setservices('libsimple_parent_gridcomp'))
        parent_gc = create_grid_comp('parent', ss_parent, config, rc=status)
      end associate
      @assert_that(status, is(0))
      parent_meta => get_outer_meta(parent_gc, rc=status)
      @assert_that(status, is(0))
      user_gc = parent_meta%get_gridcomp()

      associate (ss_leaf => user_setservices('libsimple_leaf_gridcomp'))
        ! Empty name
        call parent_meta%add_child('', ss_leaf, config, rc=status)
        @assertExceptionRaised('Child name <> does not conform to GEOS standards.')

        ! Illegal starting character
        call parent_meta%add_child('1A', ss_leaf, config, rc=status)
        @assertExceptionRaised('Child name <1A> does not conform to GEOS standards.')

        ! Illegal character: hyphen
        call parent_meta%add_child('A-1', ss_leaf, config, rc=status)
        @assertExceptionRaised('Child name <A-1> does not conform to GEOS standards.')

      end associate

   end subroutine test_MAPL_invalid_name
end module Test_RunChild
