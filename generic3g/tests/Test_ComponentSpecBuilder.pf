module Test_ComponentSpecBuilder
   use funit
   use yafyaml
   use mapl3g_UserSetServices
   use mapl3g_ComponentSpecBuilder
   implicit none

contains


   ! setServices:
   !      sharedObj: <dso_name>
   !      userRoutine: <user_routine>  
   @test
   subroutine test_build_setServices()
      type(Parser) :: p
      class(YAML_Node), allocatable :: config
      integer :: status

      p = Parser('core')
      config = p%load(TextStream('{sharedObj: libA, userRoutine: procB}'))

      associate ( ss_expected => DSOSetServices('libA', 'procB') )
        @assert_that(build_setservices(config) == ss_expected, is(true()))
      end associate
      
   end subroutine test_build_setServices

   @test
   subroutine test_build_setServices_default()
      type(Parser) :: p
      class(YAML_Node), allocatable :: config
      integer :: status

      p = Parser('core')
      config = p%load(TextStream('{sharedObj: libA}'))

      associate ( ss_expected => DSOSetServices('libA', 'setservices_') )
        @assert_that(build_setservices(config) == ss_expected, is(true()))
      end associate
      
   end subroutine test_build_setServices_default

   @test
   subroutine test_equal_child_spec_name_differs()
      use mapl3g_ChildSpec
      class(AbstractUserSetServices), allocatable :: ss

      ss = user_setservices('libA', 'setservices_')
      
      associate (a => ChildSpec('A', ss), b => ChildSpec('B', ss))
        @assert_that(a == b, is(false()))
        @assert_that(a /= b, is(true()))
      end associate
   end subroutine test_equal_child_spec_name_differs

   @test
   subroutine test_equal_child_spec_ss_differs()
      use mapl3g_ChildSpec
      class(AbstractUserSetServices), allocatable :: ss_A
      class(AbstractUserSetServices), allocatable :: ss_B

      ss_A = user_setservices('libA', 'setservices_')
      ss_B = user_setservices(gamma)
      
      associate (a => ChildSpec('A', ss_A), b => ChildSpec('A', ss_B))
        @assert_that(a == b, is(false()))
        @assert_that(a /= b, is(true()))
      end associate

   contains
      subroutine gamma(gc, rc)
         use esmf
         type(ESMF_GridComp) :: gc
         integer, intent(out) :: rc
      end subroutine gamma
      
   end subroutine test_equal_child_spec_ss_differs

   @test
   subroutine test_equal_child_spec_cfg_differs()
      use mapl3g_ChildSpec
      class(AbstractUserSetServices), allocatable :: ss
      class(AbstractUserSetServices), allocatable :: ss_B

      ss = user_setservices('libA', 'setservices_')
      
      associate( a => ChildSpec('A', ss, yaml_config='a.yml') )

        associate( b => ChildSpec('A', ss) )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate

        associate( b => ChildSpec('A', ss, yaml_config='a2.yml') )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate
          
        associate( b => ChildSpec('A', ss, esmf_config='a2.rc') )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate

        associate( b => ChildSpec('A', ss, esmf_config='a2.rc', yaml_config='a.yml') )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate

      end associate

      associate( a => ChildSpec('A', ss, esmf_config='a.rc') )
        associate( b => ChildSpec('A', ss) )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate

        associate( b => ChildSpec('A', ss, yaml_config='a2.yml') )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate
          
        associate( b => ChildSpec('A', ss, esmf_config='a2.rc') )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate

        associate( b => ChildSpec('A', ss, esmf_config='a.rc', yaml_config='a.yml') )
          @assert_that(a == b, is(false()))
          @assert_that(a /= b, is(true()))
        end associate

      end associate
   contains
      subroutine gamma(gc, rc)
         use esmf
         type(ESMF_GridComp) :: gc
         integer, intent(out) :: rc
      end subroutine gamma
      
   end subroutine test_equal_child_spec_cfg_differs

end module Test_ComponentSpecBuilder
