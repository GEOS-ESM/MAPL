#include "MAPL_TestErr.h"
module Test_BracketClassAspect
   use mapl3g_StateItem
   use mapl3g_AspectId
   use mapl3g_StateItemSpec
   use mapl3g_BracketClassAspect
   use mapl3g_VerticalGridAspect
   use mapl3g_BasicVerticalGrid
   use mapl3g_VariableSpec
   use mapl3g_StateItemAspect
   use mapl3g_StateRegistry
   use mapl3g_Geom_API
   use funit
   use esmf
   implicit none

   type(ESMF_Geom) :: geom

contains

   @before
   subroutine setup()
      type(ESMF_HConfig) :: hconfig
      type(MaplGeom) :: mapl_geom
      type(GeomManager), pointer :: geom_mgr
      integer :: status

      geom_mgr => get_geom_manager()

      hconfig = ESMF_HConfigCreate(content="{class: latlon, im_world: 12, jm_world: 13, pole: PC, dateline: DC}", _RC)
      mapl_geom = geom_mgr%get_mapl_geom(hconfig, _RC)
      geom = mapl_geom%get_geom()
      call ESMF_HConfigDestroy(hconfig)

   end subroutine setup


   @test
   subroutine test_allocate()
      type(VariableSpec) :: var_spec
      type(StateItemSpec), target :: state_item_spec
      type(ESMF_FieldBundle), allocatable :: field_bundle

      integer :: status
      integer :: fieldCount
      type(AspectMap), pointer :: aspects
      type(BracketClassAspect) :: bracket_aspect
      integer, parameter :: BRACKET_SIZE = 2
      type(StateRegistry), target :: registry

      var_spec = make_VariableSpec(itemtype=MAPL_STATEITEM_BRACKET, state_intent=ESMF_STATEINTENT_EXPORT, &
           short_name='a', standard_name='A', geom=geom, units='m', bracket_size=BRACKET_SIZE, _RC)

      state_item_spec = var_spec%make_StateItemSpec(registry, vertical_grid=BasicVerticalGrid(5), _RC)

      call state_item_spec%create(_RC)
      call state_item_spec%allocate(_RC)

      aspects => state_item_spec%get_aspects()
      bracket_aspect = to_BracketClassAspect(aspects, _RC)
      call bracket_aspect%get_payload(bundle=field_bundle, _RC)

      call ESMF_FieldBundleValidate(field_bundle, _RC)
      call ESMF_FieldBundleGet(field_bundle, fieldCount=fieldCount, _RC)
      @assert_that(fieldCount, is(BRACKET_SIZE))

      call bracket_aspect%destroy(_RC)

   end subroutine test_allocate
      

end module Test_BracketClassAspect
